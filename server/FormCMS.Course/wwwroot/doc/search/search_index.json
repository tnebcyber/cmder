{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to FormCMS ! \ud83d\ude80 Our mission is to make data modeling , backend development , and frontend development as simple and intuitive as filling out a form \ud83d\udccb We\u2019d love for you to contribute to FormCMS! Check out our CONTRIBUTING guide to get started. Love FormCMS? Show your support by giving us a \u2b50 on GitHub and help us grow! \ud83c\udf1f Have suggestions? Connect with us on Reddit! https://www.reddit.com/r/FormCMS/ What is FormCMS? FormCMS is an open-source Content Management System designed to simplify and speed-up web development workflows. While it's particularly suited for CMS projects, it is also highly beneficial for general web applications, reducing the need for repetitive REST/GraphQL API development. CRUD Operations: FormCMS includes built-in RESTful APIs for Create, Read, Update, and Delete (CRUD) operations, complemented by a React-based admin panel for efficient data management. GraphQL Queries: Access multiple related entities in a single query, enhancing client-side performance, security, and flexibility. Grapes.js Page Designer: Build dynamic pages effortlessly using the integrated page designer powered by Grapes.js and Handlebars . Easily bind data sources for an interactive and streamlined design experience. New CMS? \u2014 Data Modeling Data Modeling in Current CMS Solutions Most CMS solutions support entity customization and adding custom properties, but they implement these changes in three distinct ways: Denormalized Key-Value Storage : Custom properties are stored in a table with columns like ContentItemId, Key, and Value. JSON Data Storage : Some CMS platforms store custom properties as JSON data in a document database, while others use relational databases. Manually Created C# Classes : Writing code adds custom properties to create classes that the system uses with Entity Framework. The Pros and Cons: Key-Value Storage : This approach offers flexibility but suffers from performance inefficiencies and lacks relational integrity. Document Database : Storing data as documents lacks a structured format and makes data integrity harder to enforce. C# Classes : While my preferred method, it lacks flexibility. Any minor changes require rebuilding and redeploying the system. Data Modeling with FormCMS In contrast, FormCMS adopts a normalized, structured data approach, where each property is mapped to a corresponding table field: Maximized Relational Database Functionality : By leveraging indexing and constraints, FormCMS enhances performance and ensures data integrity. Data Accessibility : This model allows for easy data integration with other applications, Entity Framework, or even non-C# languages. Support for Relationships : FormCMS enables complex relationships (many-to-one, one-to-many, many-to-many), making it easy to provide GraphQL Query out of the box and provide more advanced querying capabilities. New CMS? \u2014 GraphQL Issues Key Challenges Security & Over-Fetching \u2013 Complex or poorly optimized queries can overload the backend, exposing vulnerabilities and impacting performance. Caching Limitations \u2013 GraphQL lacks built-in CDN caching, making performance optimization harder. N+1 Query Problem \u2013 Individual resolver calls can lead to inefficient database queries. Solution: Persisted Queries with GET Requests Many GraphQL frameworks support persisted queries with GET requests, enabling caching and improved performance. How FormCMS Solves These Issues FormCMS automatically saves GraphQL queries and converts them into RESTful GET requests. For example: query TeacherQuery($id: Int) { teacherList(idSet: [$id]) { id firstname lastname skills { id name } } } becomes GET /api/queries/TeacherQuery . Security & Efficiency \u2013 Only Admins can define GraphQL queries, preventing abuse. Backend and frontend teams optimize queries to avoid excessive data requests. Caching \u2013 GET requests enable efficient CDN caching, while ASP.NET Core\u2019s hybrid cache further boosts performance. Performance \u2013 Related entities are retrieved in a single optimized query, avoiding the N+1 problem. By transforming GraphQL into optimized REST-like queries, FormCMS ensures a secure, efficient, and scalable API experience. Online Course System Demo Live Demo Public Site: fluent-cms-admin.azurewebsites.net Admin Panel: fluent-cms-admin.azurewebsites.net/admin Email: admin@cms.com Password: Admin1! Additional Resources GraphQL Playground: fluent-cms-admin.azurewebsites.net/graph Documentation: fluent-cms-admin.azurewebsites.net/doc/index.html Examples Source Code example code can be found at /formCMS/examples for Sqlite: run the SqliteDemo project for SqlServer: run the SqlServerDemo/SqlServerAppHost project for PostgreSQL : run the PostgresDemo/PostgresAppHost project Defult login: - Eamil : samdmin@cms.com - Password: Admin1! After login to Admin Panel , you can go to Tasks , click Import Demo Data , to import demo data. Online Course System Backend This section provides detailed guidance on developing a foundational online course system, encompassing key entities: teacher , course , lesson , skill , and material . Database Schema 1. Teachers Table The Teachers table maintains information about instructors, including their personal and professional details. Field Header Data Type id ID Int firstname First Name String lastname Last Name String email Email String phone_number Phone Number String image Image String bio Bio Text 2. Courses Table The Courses table captures the details of educational offerings, including their scope, duration, and prerequisites. Field Header Data Type id ID Int name Course Name String status Status String level Level String summary Summary String image Image String desc Description Text duration Duration String start_date Start Date Datetime 3. Lessons Table The Lessons table contains detailed information about the lessons within a course, including their title, content, and associated teacher. Field Header Data Type id ID Int name Lesson Name String description Description Text teacher Teacher Int (Foreign Key) course Course Int (Foreign Key) created_at Created At Datetime updated_at Updated At Datetime 4. Skills Table The Skills table records competencies attributed to teachers. Field Header Data Type id ID Int name Skill Name String years Years of Experience Int created_by Created By String created_at Created At Datetime updated_at Updated At Datetime 5. Materials Table The Materials table inventories resources linked to courses. Field Header Data Type id ID Int name Name String type Type String image Image String link Link String file File String Relationships Courses to Teachers : Man-to-One(Each teacher can teach multiple courses; each course is assigned to one teacher. A teacher can exist independently of a course). Teachers to Skills : Many-to-Many (Multiple teachers can share skills, and one teacher may have multiple skills). Courses to Materials : Many-to-Many (A course may include multiple materials, and the same material can be used in different courses). Courses to Lessons : One-to-Many (Each course can have multiple lessons, but each lesson belongs to one course. A lesson cannot exist without a course, as it has no meaning on its own). Schema Creation via FormCMS Schema Builder Accessing Schema Builder After launching the web application, locate the Schema Builder menu on the homepage to start defining your schema. Adding Entities Example Configuration 1. Navigate to the Entities section of the Schema Builder. 2. Create entities such as \"Teacher\" and \"Course.\" 3. For the Course entity, add attributes such as name , status , level , and description . Defining Relationships Example Configuration 1. Course and Teacher (Many-to-One Relationship) To establish a many-to-one relationship between the Course and Teacher entities, you can include a Lookup attribute in the Course entity. This allows selecting a single Teacher record when adding or updating a Course . Attribute Value Field teacher DataType Lookup DisplayType Lookup Options Teacher Description: When a course is created or modified, a teacher record can be looked up and linked to the course. 2 Course and Lesson(One-to-Many Relationship) To establish a one-to-many relationship between the Course and Lesson entities, use a Collection attribute in the Course entity. This enables associating multiple lessons with a single course. Attribute Value Field lessons DataType Collection DisplayType EditTable Options Lesson Description: When managing a course , you can manage lessons of this course. 3. Course and Materials (Many-to-Many Relationship) To establish a many-to-many relationship between the Course and Material entities, use a Junction attribute in the Course entity. This enables associating multiple materials with a single course. Attribute Value Field materials DataType Junction DisplayType Picklist Options Material Description: When managing a course, you can select multiple material records from the Material table to associate with the course. Admin Panel The last chapter introduced how to model entities, this chapter introduction how to use Admin-Panel to manage data of those entities. Display Types The Admin Panel supports various UI controls to display attributes: \"text\" : Single-line text input. \"textarea\" : Multi-line text input. \"editor\" : Rich text input. \"number\" : Single-line text input for numeric values only. \"datetime\" : Datetime picker for date and time inputs. \"date\" : Date picker for date-only inputs. \"image\" : Upload a single image, storing the image URL. \"gallery\" : Upload multiple images, storing their URLs. \"file\" : Upload a file, storing the file URL. \"dropdown\" : Select an item from a predefined list. \"multiselect\" : Select multiple items from a predefined list. \"lookup\" : Select an item from another entity with a many-to-one relationship (requires Lookup data type). \"treeSelect\" : Select an item from another entity with a many-to-one relationship (requires Lookup data type), items are organized as tree. \"picklist\" : Select multiple items from another entity with a many-to-many relationship (requires Junction data type). \"tree\" : Select multiple items from another entity with a many-to-many relationship (requires Junction data type), items are organized as a tree. \"edittable\" : Manage items of a one-to-many sub-entity (requires Collection data type). See this example how to configure entity category , so it's item can be organized as tree. DataType to DisplayType Mapping Table Below is a mapping of valid DataType and DisplayType combinations: DataType DisplayType Description Int Number Input for integers. Datetime Datetime Datetime picker for date and time inputs. Datetime Date Date picker for date-only inputs. String Number Input for numeric values. String Datetime Datetime picker for date and time inputs. String Date Date picker for date-only inputs. String Text Single-line text input. String Textarea Multi-line text input. String Image Single image upload. String Gallery Multiple image uploads. String File File upload. String Dropdown Select an item from a predefined list. String Multiselect Select multiple items from a predefined list. Text Multiselect Select multiple items from a predefined list. Text Gallery Multiple image uploads. Text Textarea Multi-line text input. Text Editor Rich text editor. Lookup Lookup Select an item from another entity. Lookup TreeSelect Select an item from another entity. Junction Picklist Select multiple items from another entity. Lookup Tree Select multiple items from another entity. Collection EditTable Manage items of a sub-entity. List Page Example Course List Page The List Page displays entities in a tabular format, supporting sorting, searching, and pagination for efficient browsing or locating of specific records. Sorting Sort records by clicking the \u2191 or \u2193 icon in the table header. - Order by Created At Example - Order by Name Example Filtering Apply filters by clicking the Funnel icon in the table header. Filter by Created At (2024-09-07) Filter by Course Name (Starts with A or C) Duplicate Clicking the duplicate button opens the \"Add New Data\" page with prefilled values from the selected record for quick entry. Detail Page Detail page provides an interface to manage single record. Example of display types date , image , gallery , muliselect , dropdown , Lesson Detail Page . Example of lookup , picklist , edittable Course Detail Page Publish / Preview Content This feature allows content creators to plan and organize their work, saving drafts for later completion. Content Publication Status Content can have one of the following publication statuses: - draft - scheduled - published - unpublished Only content with the status published can be retrieved through GraphQL queries. Setting Default Publication Status in the Schema Builder When defining an entity in the Schema Builder, you can configure its default publication status as either draft or published . Managing Publication Status in the Admin Panel On the content edit page, you can: - Publish : Make content immediately available. - Unpublish : Remove content from public view. - Schedule : Set a specific date and time for the content to be published. Preview Draft/Scheduled/Unpublished Content By default, only published content appears in query results. If you want to preview how the content looks on a page before publishing, you can add the query parameter preview=1 to the page URL. For a more convenient approach, you can set the Preview URL in the Entity Settings page. Example Entity Settings Page Once set, you can navigate to the Entity Management page and simply click the Preview button to view the content in preview mode. Example Content Manage Page Publication Worker The Publication Worker automates the process of updating scheduled items in batches, transitioning them to the published status at the appropriate time. Concurrent Update Protection Protect user from dirty write(concurrent update) How does it work? Return the updated_at timestamp when fetching the item. When updating, compare the stored updated_at with the one in the request. If they differ, reject the update When Is updatedAt Checked During updates During Deletions If a concurrent modification is detected, the system will throw the following exception: \"Error: Concurrent Write Detected. Someone else has modified this item since you last accessed it. Please refresh the data and try again.\" Audit Logging Audit logging in FormCMS helps maintain accountability and provides a historical record of modifications made to entities within the system. Audit Log Entity An audit log entry captures essential information about each modification. The entity structure includes the following fields: UserId ( string ): The unique identifier of the user performing the action. UserName ( string ): The name of the user. Action ( ActionType ): The type of action (Create, update, Delete) performed. EntityName ( string ): The name of the entity affected. RecordId ( string ): The unique identifier of the record modified. RecordLabel ( string ): A human-readable label for the record. Payload ( Record ): The data associated with the action. CreatedAt ( DateTime ): The timestamp when the action occurred. When Is Audit Log Added An audit log entry is created when a user performs any of the following actions: Creating a new record. Updating an existing record. Deleting a record. How to view Audit Log Audit logs can be accessed and searched by users with appropriate permissions. The following roles have access: Admin Super Admin These users can: - View a list of audit logs. - Search logs by user, entity, or action type. - Filter logs by date range. Benefits of Audit Logging Ensures transparency and accountability. Helps with troubleshooting and debugging. Provides insights into system usage and modifications. Supports compliance with regulatory requirements. By maintaining a detailed audit trail, the System enhances security and operational efficiency, ensuring that all modifications are tracked and can be reviewed when necessary. Export and Import Data This feature allows you to export or import data This feature is helpful for the following scenarios: 1. Migrating data from one server to another, or even between different types of databases. 2. Backing up your data. 3. Cleaning data by exporting only the latest schema, excluding audit log data. Exporting Data Log in to the 'Admin Panel' and navigate to Tasks . Click Add Export Task . Wait a few minutes, then refresh the page. Once the task is complete, you can download the exported zip file. Importing Data Log in to the 'Admin Panel' and go to Tasks . Click Add Import Task , then select the zip file you wish to import. Wait a few minutes, then refresh the page to check if the task was successful. GraphQL Query FormCMS simplifies frontend development by offering robust GraphQL support. Getting Started Accessing the GraphQL IDE To get started, launch the web application and navigate to /graph . You can also try our online demo . Singular vs. List Response For each entity in FormCMS, two GraphQL fields are automatically generated: - <entityName> : Returns a record. - <entityNameList> : Returns a list of records. **Single Course ** { course { id name } } Try it here **List of Courses ** { courseList { id name } } Try it here Field Selection You can query specific fields for both the current entity and its related entities. Example Query: { courseList{ id name teacher{ id firstname lastname skills{ id name } } materials{ id, name } } } Try it here Filtering with Value Match in FormCMS FormCMS provides flexible filtering capabilities using the idSet field (or any other field), enabling precise data queries by matching either a single value or a list of values. Filter by a Single Value Example: { courseList(idSet: 5) { id name } } Try it here Filter by Multiple Values Example: { courseList(idSet: [5, 7]) { id name } } Try it here Advanced Filtering with Operator Match in FormCMS FormCMS supports advanced filtering options with Operator Match , allowing users to combine various conditions for precise queries. matchAll Example: Filters where all specified conditions must be true. In this example: id > 5 and id < 15 . { courseList(id: {matchType: matchAll, gt: 5, lt: 15}) { id name } } Try it here matchAny Example: Filters where at least one of the conditions must be true. In this example: name starts with \"A\" or name starts with \"I\" . { courseList(name: [{matchType: matchAny}, {startsWith: \"A\"}, {startsWith: \"I\"}]) { id name } } Try it here Filter Expressions in FormCMS Filter Expressions allow precise filtering by specifying a field, including nested fields using JSON path syntax. This enables filtering on subfields for complex data structures. Example: Filter by Teacher's Last Name This query returns courses taught by a teacher whose last name is \"Circuit.\" { courseList(filterExpr: {field: \"teacher.lastname\", clause: {equals: \"Circuit\"}}) { id name teacher { id lastname } } } Try it here Sorting Sorting by a single field { courseList(sort:nameDesc){ id, name } } Try it here Sorting by multiple fields { courseList(sort:[level,id]){ id, level name } } Try it here Sort Expressions in FormCMS Sort Expressions allow sorting by nested fields using JSON path syntax. Example: Sort by Teacher's Last Name { courseList(sortExpr:{field:\"teacher.lastname\", order:Desc}) { id name teacher { id lastname } } } Try it here Pagination Pagination on root field { courseList(offset:2, limit:3){ id, name } } Try it here Pagination on sub field { courseList{ id, name materials(limit:2){ id, name } } } Try it here Variable Variables are used to make queries more dynamic, reusable, and secure. Variable in Value filter query ($id: Int!) { teacher(idSet: [$id]) { id firstname lastname } } Try it here Variable in Operator Match filter query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here Variable in Filter Expression query ($years: String) { teacherList(filterExpr:{field:\"skills.years\",clause:{gt:$years}}){ id firstname lastname skills{ id name years } } } Try it here Variable in Sort query ($sort_field:TeacherSortEnum) { teacherList(sort:[$sort_field]) { id firstname lastname } } Try it here Variable in Sort Expression query ($sort_order: SortOrderEnum) { courseList(sortExpr:{field:\"teacher.id\", order:$sort_order}){ id, name, teacher{ id, firstname } } } Try it here Variable in Pagination query ($offset:Int) { teacherList(limit:2, offset:$offset) { id firstname lastname } } Try it here Required vs Optional If you want a variable to be mandatory, you can add a ! to the end of the type query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here Explore the power of FormCMS GraphQL and streamline your development workflow! Saved Query Realtime queries may expose excessive technical details, potentially leading to security vulnerabilities. Saved Queries address this issue by abstracting the GraphQL query details. They allow clients to provide only variables, enhancing security while retaining full functionality. Transitioning from Real-Time Queries to Saved Queries Using OperationName as the Saved Query Identifier In FormCMS, the Operation Name in a GraphQL query serves as a unique identifier for saved queries. For instance, executing the following query automatically saves it as TeacherQuery : query TeacherQuery($id: Int) { teacherList(idSet: [$id]) { id firstname lastname skills { id name } } } Try it here Saved Query Endpoints FormCMS generates two API endpoints for each saved query: List Records: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery Single Record: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/single/ Using REST API Query Strings as Variables The Saved Query API allows passing variables via query strings: Single Value: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/?id=3 Array of Values: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?id=3&id=4 This passes [3, 4] to the idSet argument. Additional Features of Saved Query Beyond performance and security improvements, Saved Query introduces enhanced functionalities to simplify development workflows. Pagination by offset Built-in variables offset and limit enable efficient pagination. For example: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=2&offset=2 offset Pagination for Subfields To display a limited number of subfield items (e.g., the first two skills of a teacher), use the JSON path variable, such as skills.limit : https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2 Pagination by cursor For large datasets, offset pagination can strain the database. For example, querying with offset=1000&limit=10 forces the database to retrieve 1010 records and discard the first 1000. To address this, Saved Query supports cursor-based pagination , which reduces database overhead. Example response for https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3 : [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6M30\" }, { }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6NX0\" } ] If hasNextPage of the last record is true , use the cursor to retrieve the next page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&last=eyJpZCI6NX0 Similarly, if hasPreviousPage of the first record is true , use the cursor to retrieve the previous page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&first=eyJpZCI6Nn0 Cursor-Based Pagination for Subfields Subfields also support cursor-based pagination. For instance, querying https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2 returns a response like this: [ { \"id\": 3, \"firstname\": \"Jane\", \"lastname\": \"Debuggins\", \"hasPreviousPage\": false, \"skills\": [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6MSwic291cmNlSWQiOjN9\" }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6Miwic291cmNlSWQiOjN9\" } ], \"cursor\": \"eyJpZCI6M30\" } ] To fetch the next two skills, use the cursor: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/part/skills?limit=2&last=eyJpZCI6Miwic291cmNlSWQiOjN9 Drag and Drop Page Designer The page designer utilizes the open-source GrapesJS and Handlebars, enabling seamless binding of GrapesJS Components with FormCMS Queries for dynamic content rendering. Page Types: Landing Page, Detail Page, and Home Page Landing Page A landing page is typically the first page a visitor sees. - URL format : /page/<pagename> - Structure : Comprised of multiple sections, each section retrieves data via a query . Example : Landing Page This page fetches data from: - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?status=featured - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?level=Advanced Detail Page A detail page provides specific information about an item. - URL format : /page/<pagename>/<router parameter> - Data Retrieval : FormCMS fetches data by passing the router parameter to a query . Example : Course Detail Page This page fetches data from: https://fluent-cms-admin.azurewebsites.net/api/queries/course/one?course_id=22 Home Page The homepage is a special type of landing page named home . - URL format : /pages/home - Special Behavior : If no other route matches the path / , FormCMS renders /pages/home by default. Example : The URL / will be resolved to /pages/home unless explicitly overridden. Introduction to GrapesJS Panels Understanding the panels in GrapesJS is crucial for leveraging FormCMS's customization capabilities in the Page Designer UI. This section explains the purpose of each panel and highlights how FormCMS enhances specific areas to streamline content management and page design. Style Manager : Used to customize CSS properties of elements selected on the canvas. FormCMS Integration : This panel is left unchanged by FormCMS, as it already provides powerful styling options. Traits Panel : Allows modification of attributes for selected elements. FormCMS Integration : Custom traits are added to this panel, enabling users to bind data to components dynamically. Layers Panel : Displays a hierarchical view of elements on the page, resembling a DOM tree. FormCMS Integration : While FormCMS does not alter this panel, it\u2019s helpful for locating and managing FormCMS blocks within complex page designs. Blocks Panel : Contains pre-made components that can be dragged and dropped onto the page. FormCMS Integration : FormCMS enhances this panel by adding custom-designed blocks tailored for its CMS functionality. By familiarizing users with these panels and their integration points, this chapter ensures a smoother workflow and better utilization of FormCMS's advanced page-building tools. Data Binding: Singleton or List FormCMS leverages Handlebars expressions for dynamic data binding in pages and components. Singleton Singleton fields are enclosed within {{ }} to dynamically bind individual values. Example Page Settings: Page Schema Settings Example Query: Retrieve Course Data Example Rendered Page: Rendered Course Page List Handlebars supports iterating over arrays using the {{#each}} block for repeating data structures. {{#each course}} <li>{{title}}</li> {{/each}} In FormCMS, you won\u2019t explicitly see the {{#each}} statement in the Page Designer. If a block's data source is set to data-list , the system automatically generates the loop. Example Page Settings: Page Schema Settings Example Rendered Page: Rendered List Page Example Queries: Featured Courses Advanced Level Courses Steps to Bind a Data Source To bind a Data List to a component, follow these steps: Drag a block from the Data List category in the Page Designer. Open the Layers Panel and select the Data List component. In the Traits Panel , configure the following fields: Field Description Query The query to retrieve data. Qs Query string parameters to pass (e.g., ?status=featured , ?level=Advanced ). Offset Number of records to skip. Limit Number of records to retrieve. Pagination Options for displaying content: - Button : Divides content into multiple pages with navigation buttons (e.g., \"Next,\" \"Previous,\" or numbered buttons). - Infinite Scroll : Automatically loads more content as users scroll. Ideal for a single component at the bottom of the page. - None : Displays all available content at once without requiring additional user actions. Schema Version Control FormCMS saves each version of schemas, allowing users to roll back to earlier versions. Admins can freely test draft versions, while only published versions take effect. Requirements To illustrate this feature, let's take a Page as an example. Once a page is published, it becomes publicly accessible. You may need version control for two main reasons: You want to make changes but ensure they do not take effect until thoroughly tested. If issues arise in the latest version, you need the ability to roll back to a previous version. Choosing a Version After making changes, the latest version's status changes to draft in the Page List Page . To manage versions, click the View History button to navigate to the History Version List Page . Here, you can select any version and set it to published status. Testing a Draft Version To preview a draft version, append sandbox=1 as a query parameter in the URL: Preview Draft Version Page . Alternatively, click the View Page button on the Page Design page. Compare schema Changes You can compare the difference between different versions, use the Schema Diff Tool . Duplicate You can duplicate any schema version and save it as a new schema. Online Course System Frontend Having established our understanding of FormCMS essentials like Entity, Query, and Page, we're ready to build a frontend for an online course website. Key Pages Home Page ( home ) : The main entry point, featuring sections like Featured Courses and Advanced Courses . Each course links to its respective Course Details page. Course Details ( course/{course_id} ) : Offers detailed information about a specific course and includes links to the Teacher Details page. Teacher Details ( teacher/{teacher_id} ) : Highlights the instructor\u2019s profile and includes a section displaying their latest courses, which link back to the Course Details page. Home Page | | +-------------------+ | | v v Latest Courses Course Details | | | | v v Course Details <-------> Teacher Details Designing the Home Page Drag and Drop Components : Use the FormCMS page designer to drag a Content-B component. Set Data Source : Assign the component's data source to the course query. Link Course Items : Configure the link for each course to /pages/course/{{id}} . The Handlebars expression {{id}} is dynamically replaced with the actual course ID during rendering. Creating the Course Details Page Page Setup : Name the page course/{course_id} to capture the course_id parameter from the URL (e.g., /pages/course/20 ). Query Configuration : The variable {course_id:20} is passed to the course query, generating a WHERE id IN (20) clause to fetch the relevant course data. Linking to Teacher Details : Configure the link for each teacher item on this page to /pages/teacher/{{teacher.id}} . Handlebars dynamically replaces {{teacher.id}} with the teacher\u2019s ID. For example, if a teacher object has an ID of 3, the link renders as /pages/teacher/3 . Creating the Teacher Details Page Page Setup : Define the page as teacher/{teacher_id} to capture the teacher_id parameter from the URL. Set Data Source : Assign the teacher query as the page\u2019s data source. Adding a Teacher\u2019s Courses Section Drag a ECommerce A component onto the page. Set its data source to the course query, filtered by the teacher\u2019s ID ( WHERE teacher IN (3) ). When rendering the page, the PageService automatically passes the teacher_id (e.g., {teacher_id: 3} ) to the query. Navigation by Category Demo of Category Tree and Breadcrumb Navigation Category Tree Navigation : View Demo Breadcrumb Navigation : View Demo Creating a Category Entity To create a category entity in the Schema Builder, include parent and children attributes. - Example Configuration : Edit Example Configuration Options for Navigation DataType: lookup & DisplayType: TreeSelect Use this configuration to display a category as a property. Edit Example DataType: junction & DisplayType: Tree Use this configuration to enable category-based navigation. Edit Example Using Navigation Components in Page Designer Tree Layer Menu : Use the Tree Layer Menu component for hierarchical navigation. Edit Example Breadcrumbs : Use the Breadcrumbs component to display navigation paths. Edit Example Optimizing Caching FormCMS employs advanced caching strategies to boost performance. For detailed information on ASP.NET Core caching, visit the official documentation: ASP.NET Core Caching Overview . Cache Schema FormCMS automatically invalidates schema caches whenever schema changes are made. The schema cache consists of two types: Entity Schema Cache Caches all entity definitions required to dynamically generate GraphQL types. Query Schema Cache Caches query definitions, including dependencies on multiple related entities, to compose efficient SQL queries. By default, schema caching is implemented using IMemoryCache . However, you can override this by providing a HybridCache . Below is a comparison of the two options: IMemoryCache Advantages : Simple to debug and deploy. Ideal for single-node web applications. Disadvantages : Not suitable for distributed environments. Cache invalidation on one node (e.g., Node A) does not propagate to other nodes (e.g., Node B). HybridCache Key Features : Scalability : Combines the speed of local memory caching with the consistency of distributed caching. Stampede Resolution : Effectively handles cache stampede scenarios, as verified by its developers. Limitations : The current implementation lacks \"Backend-Assisted Local Cache Invalidation,\" meaning invalidation on one node does not instantly propagate to others. ** FormCMS Strategy**: FormCMS mitigates this limitation by setting the local cache expiration to 20 seconds (one-third of the distributed cache expiration, which is set to 60 seconds). This ensures cache consistency across nodes within 20 seconds, significantly improving upon the typical 60-second delay in memory caching. To implement a HybridCache , use the following code: builder.AddRedisDistributedCache(connectionName: CmsConstants.Redis); builder.Services.AddHybridCache(); Cache Data FormCMS does not automatically invalidate data caches. Instead, it leverages ASP.NET Core's output caching for a straightforward implementation. Data caching consists of two types: Query Data Cache Caches the results of queries for faster access. Page Cache Caches the output of rendered pages for quick delivery. By default, output caching is disabled in FormCMS. To enable it, configure and inject the output cache as shown below: builder.Services.AddOutputCache(cacheOption => { cacheOption.AddBasePolicy(policyBuilder => policyBuilder.Expire(TimeSpan.FromMinutes(1))); cacheOption.AddPolicy(CmsOptions.DefaultPageCachePolicyName, b => b.Expire(TimeSpan.FromMinutes(2))); cacheOption.AddPolicy(CmsOptions.DefaultQueryCachePolicyName, b => b.Expire(TimeSpan.FromSeconds(1))); }); // After builder.Build(); app.UseOutputCache(); Aspire Integration FormCMS leverages Aspire to simplify deployment. Architecture Overview A scalable deployment of FormCMS involves multiple web application nodes, a Redis server for distributed caching, and a database server, all behind a load balancer. +------------------+ | Load Balancer | +------------------+ | +-----------------+-----------------+ | | +------------------+ +------------------+ | Web App 1 | | Web App 2 | | +-----------+ | | +-----------+ | | | Local Cache| | | | Local Cache| | +------------------+ +------------------+ | | | | +-----------------+-----------------+ | | +------------------+ +------------------+ | Database Server | | Redis Server | +------------------+ +------------------+ Local Emulation with Aspire and Service Discovery Example Web project on GitHub Example Aspire project on GitHub To emulate the production environment locally, FormCMS leverages Aspire. Here's an example setup: var builder = DistributedApplication.CreateBuilder(args); // Adding Redis and PostgreSQL services var redis = builder.AddRedis(name: CmsConstants.Redis); var db = builder.AddPostgres(CmsConstants.Postgres); // Configuring the web project with replicas and references builder.AddProject<Projects.FormCMS_Course>(name: \"web\") .WithEnvironment(CmsConstants.DatabaseProvider, CmsConstants.Postgres) .WithReference(redis) .WithReference(db) .WithReplicas(2); builder.Build().Run(); Benefits: Simplified Configuration : No need to manually specify endpoints for the database or Redis servers. Configuration values can be retrieved using: csharp builder.Configuration.GetValue<string>(); builder.Configuration.GetConnectionString(); Realistic Testing : The local environment mirrors the production architecture, ensuring seamless transitions during deployment. By adopting these caching and deployment strategies, FormCMS ensures improved performance, scalability, and ease of configuration. Query with Document DB Optimizing query performance by syncing relational data to a document database, such as MongoDB, significantly improves speed and scalability for high-demand applications. Limitations of ASP.NET Core Output Caching ASP.NET Core's output caching reduces database access when repeated queries are performed. However, its effectiveness is limited when dealing with numerous distinct queries: The application server consumes excessive memory to cache data. The same list might be cached multiple times in different orders. The database server experiences high load when processing numerous distinct queries simultaneously. Using Document Databases to Improve Query Performance For the query below, FormCMS joins the post , tag , category , and author tables: query post_sync($id: Int) { postList(idSet: [$id], sort: id) { id, title, body, abstract tag { id, name } category { id, name } author { id, name } } } By saving each post along with its related data as a single document in a document database, such as MongoDB, several improvements are achieved: - Reduced database server load since data retrieval from multiple tables is eliminated. - Reduced application server processing, as merging data is no longer necessary. Performance Testing Using K6 scripts with 1,000 virtual users concurrently accessing the query API, the performance difference between PostgreSQL and MongoDB was tested, showing MongoDB to be significantly faster: export default function () { const id = Math.floor(Math.random() * 1000000) + 1; // Random id between 1 and 1,000,000 /* PostgreSQL */ // const url = `http://localhost:5091/api/queries/post_sync/?id=${id}`; /* MongoDB */ const url = `http://localhost:5091/api/queries/post/?id=${id}`; const res = http.get(url); check(res, { 'is status 200': (r) => r.status === 200, 'response time is < 200ms': (r) => r.timings.duration < 200, }); } /* MongoDB: http_req_waiting...............: avg=50.8ms min=774\u00b5s med=24.01ms max=3.23s p(90)=125.65ms p(95)=211.32ms PostgreSQL: http_req_waiting...............: avg=5.54s min=11.61ms med=4.08s max=44.67s p(90)=13.45s p(95)=16.53s */ Synchronizing Query Data to Document DB Architecture Overview Enabling Message Publishing in WebApp To enable publishing messages to the Message Broker, use Aspire to add a NATS resource. Detailed documentation is available in Microsoft Docs . Add the following line to the Aspire HostApp project: builder.AddNatsClient(AppConstants.Nats); Add the following lines to the WebApp project: builder.AddNatsClient(AppConstants.Nats); var entities = builder.Configuration.GetRequiredSection(\"TrackingEntities\").Get<string[]>()!; builder.Services.AddNatsMessageProducer(entities); FormCMS publishes events for changes made to entities listed in appsettings.json : { \"TrackingEntities\": [ \"post\" ] } Enabling Message Consumption in Worker App Add the following to the Worker App: var builder = Host.CreateApplicationBuilder(args); builder.AddNatsClient(AppConstants.Nats); builder.AddMongoDBClient(AppConstants.MongoCms); var apiLinksArray = builder.Configuration.GetRequiredSection(\"ApiLinksArray\").Get<ApiLinks[]>()!; builder.Services.AddNatsMongoLink(apiLinksArray); Define the ApiLinksArray in appsettings.json to specify entity changes and the corresponding query API: { \"ApiLinksArray\": [ { \"Entity\": \"post\", \"Api\": \"http://localhost:5001/api/queries/post_sync\", \"Collection\": \"post\", \"PrimaryKey\": \"id\" } ] } When changes occur to the post entity, the Worker Service calls the query API to retrieve aggregated data and saves it as a document. Migrating Query Data to Document DB After adding a new entry to ApiLinksArray , the Worker App will perform a migration from the start to populate the Document DB. Replacing Queries with Document DB Architecture Overview To enable MongoDB queries in your WebApp, use the Aspire MongoDB integration. Details are available in Microsoft Docs . Add the following code to your WebApp: builder.AddMongoDBClient(connectionName: AppConstants.MongoCms); var queryLinksArray = builder.Configuration.GetRequiredSection(\"QueryLinksArray\").Get<QueryLinks[]>()!; builder.Services.AddMongoDbQuery(queryLinksArray); Define QueryLinksArray in appsettings.json to specify MongoDB queries: { \"QueryLinksArray\": [ { \"Query\": \"post\", \"Collection\": \"post\" }, { \"Query\": \"post_test_mongo\", \"Collection\": \"post\" } ] } The WebApp will now query MongoDB directly for the specified collections. Integrating it into Your Project Follow these steps to integrate FormCMS into your project using a NuGet package. You can reference the code from https://github.com/FormCMS/FormCMS/tree/main/examples Create a New ASP.NET Core Web Application . Add the NuGet Package : To add FormCMS, run the following command: dotnet add package FormCMS Modify Program.cs : Add the following line before builder.Build() to configure the database connection (use your actual connection string): builder.AddSqliteCms(\"Data Source=cms.db\"); var app = builder.Build(); Currently, FormCMS supports AddSqliteCms , AddSqlServerCms , and AddPostgresCms . Initialize FormCMS : Add this line after builder.Build() to initialize the CMS: await app.UseCmsAsync(); This will bootstrap the router and initialize the FormCMS schema table. Adding Business Logic Learn how to customize your application by adding validation logic, hook functions, and producing events to Kafka. Adding Validation Logic with Simple C# Expressions Simple C# Validation You can define simple C# expressions in the Validation Rule of attributes using Dynamic Expresso . For example, a rule like name != null ensures the name attribute is not null. Additionally, you can specify a Validation Error Message to provide users with feedback when validation fails. Using Regular Expressions Dynamic Expresso supports regular expressions, allowing you to write rules like Regex.IsMatch(email, \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\") . Note: Since Dynamic Expresso doesn't support verbatim strings , you must escape backslashes ( \\ ). Extending Functionality with Hook Functions To implement custom business logic, such as verifying that a teacher entity has valid email and phone details, you can register hook functions to run before adding or updating records: var registry = app.GetHookRegistry(); // Hook function for pre-add validation registry.EntityPreAdd.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; }); // Hook function for pre-update validation registry.EntityPreUpdate.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; }); Producing Events to an Event Broker (e.g., Kafka) To enable asynchronous business logic through an event broker like Kafka, you can produce events using hook functions. This feature requires just a few additional setup steps: Add the Kafka producer configuration: csharp builder.AddKafkaMessageProducer(\"localhost:9092\"); Register the message producer hook: csharp app.RegisterMessageProducerHook(); Here\u2019s a complete example: builder.AddSqliteCms(\"Data Source=cmsapp.db\").PrintVersion(); builder.AddKafkaMessageProducer(\"localhost:9092\"); var app = builder.Build(); await app.UseCmsAsync(false); app.RegisterMessageProducerHook(); With this setup, events are produced to Kafka, allowing consumers to process business logic asynchronously. Development Guide The backend is written in ASP.NET Core, the Admin Panel uses React, and the Schema Builder is developed with jQuery. Overview The system comprises three main components: 1. Backend - Developed in ASP.NET Core. 2. Admin Panel - Built using React. 3. Schema Builder - Created with jQuery. System Diagram Repository Links Backend Server Admin Panel UI Schema Builder Backend Server Tools ASP.NET Core SqlKata ( SqlKata Documentation ) Architecture The backend is influenced by Domain-Driven Design (DDD). Code organization follows this diagram: Core (Domain Layer) The Core layer encapsulates: - Descriptors : Includes Entity , Filter , Sort , and similar components for building queries. - HookFactory : Maintains a global Hook Registry , enabling developers to integrate custom plugins. Note : The Core layer is independent of both the Application and Infrastructure layers. Application Layer The Application layer provides the following functionalities: 1. CMS : Entity CRUD, GraphQL Queries, and Page Designer. 2. Auth : Manages permissions and roles. 3. DataLink : Integrates DocumentDB and Event Streams for scalability. Includes Builders to configure Dependency Injection and manage Infrastructure components. Infrastructure Layer The Infrastructure layer defines reusable system infrastructural components. - Application services depend on interfaces instead of implementations. - Components are designed for portability and can be reused across other projects. Util Layer A separate Util component contains static classes with pure functions. - Accessible across all layers. Admin Panel UI Tools React PrimeReact ( PrimeReact UI Library ) SWR ( Data Fetching/State Management ) Admin Panel Sequence Schema Builder UI Tools jsoneditor ( JSON Editor Documentation ) Testing Strategy This chapter describes the systems' automated testing strategy Favors integration testing over unit testing because integration tests can catch more real-world issues. For example, when inserting a record into the database, multiple modules are involved: - EntitiesHandler - EntitiesService - Entity (in core) - Query executors (e.g., SqlLite , Postgres , SqlServer ) Writing unit tests for each function and mocking its upstream and downstream services can be tedious. Instead, FormCMS focuses on checking the input and output of RESTful API endpoints in its integration tests. Integration Testing for FormCMS.Course /formcms/server/FormCMS.Course.Tests This project focuses on verifying the functionalities of the FormCMS.Course example project. New Feature Testing /formcms/server/FormCMS.App.Tests This project is dedicated to testing experimental functionalities, like MongoDB and Kafka plugins.","title":"Home"},{"location":"#what-is-formcms","text":"FormCMS is an open-source Content Management System designed to simplify and speed-up web development workflows. While it's particularly suited for CMS projects, it is also highly beneficial for general web applications, reducing the need for repetitive REST/GraphQL API development. CRUD Operations: FormCMS includes built-in RESTful APIs for Create, Read, Update, and Delete (CRUD) operations, complemented by a React-based admin panel for efficient data management. GraphQL Queries: Access multiple related entities in a single query, enhancing client-side performance, security, and flexibility. Grapes.js Page Designer: Build dynamic pages effortlessly using the integrated page designer powered by Grapes.js and Handlebars . Easily bind data sources for an interactive and streamlined design experience.","title":"What is FormCMS?"},{"location":"#new-cms-data-modeling","text":"","title":"New CMS? \u2014 Data Modeling"},{"location":"#data-modeling-in-current-cms-solutions","text":"Most CMS solutions support entity customization and adding custom properties, but they implement these changes in three distinct ways: Denormalized Key-Value Storage : Custom properties are stored in a table with columns like ContentItemId, Key, and Value. JSON Data Storage : Some CMS platforms store custom properties as JSON data in a document database, while others use relational databases. Manually Created C# Classes : Writing code adds custom properties to create classes that the system uses with Entity Framework.","title":"Data Modeling in Current CMS Solutions"},{"location":"#the-pros-and-cons","text":"Key-Value Storage : This approach offers flexibility but suffers from performance inefficiencies and lacks relational integrity. Document Database : Storing data as documents lacks a structured format and makes data integrity harder to enforce. C# Classes : While my preferred method, it lacks flexibility. Any minor changes require rebuilding and redeploying the system.","title":"The Pros and Cons:"},{"location":"#data-modeling-with-formcms","text":"In contrast, FormCMS adopts a normalized, structured data approach, where each property is mapped to a corresponding table field: Maximized Relational Database Functionality : By leveraging indexing and constraints, FormCMS enhances performance and ensures data integrity. Data Accessibility : This model allows for easy data integration with other applications, Entity Framework, or even non-C# languages. Support for Relationships : FormCMS enables complex relationships (many-to-one, one-to-many, many-to-many), making it easy to provide GraphQL Query out of the box and provide more advanced querying capabilities.","title":"Data Modeling with FormCMS"},{"location":"#new-cms-graphql-issues","text":"","title":"New CMS? \u2014 GraphQL Issues"},{"location":"#key-challenges","text":"Security & Over-Fetching \u2013 Complex or poorly optimized queries can overload the backend, exposing vulnerabilities and impacting performance. Caching Limitations \u2013 GraphQL lacks built-in CDN caching, making performance optimization harder. N+1 Query Problem \u2013 Individual resolver calls can lead to inefficient database queries.","title":"Key Challenges"},{"location":"#solution-persisted-queries-with-get-requests","text":"Many GraphQL frameworks support persisted queries with GET requests, enabling caching and improved performance.","title":"Solution: Persisted Queries with GET Requests"},{"location":"#how-formcms-solves-these-issues","text":"FormCMS automatically saves GraphQL queries and converts them into RESTful GET requests. For example: query TeacherQuery($id: Int) { teacherList(idSet: [$id]) { id firstname lastname skills { id name } } } becomes GET /api/queries/TeacherQuery . Security & Efficiency \u2013 Only Admins can define GraphQL queries, preventing abuse. Backend and frontend teams optimize queries to avoid excessive data requests. Caching \u2013 GET requests enable efficient CDN caching, while ASP.NET Core\u2019s hybrid cache further boosts performance. Performance \u2013 Related entities are retrieved in a single optimized query, avoiding the N+1 problem. By transforming GraphQL into optimized REST-like queries, FormCMS ensures a secure, efficient, and scalable API experience.","title":"How FormCMS Solves These Issues"},{"location":"#online-course-system-demo","text":"","title":"Online Course System Demo"},{"location":"#live-demo","text":"Public Site: fluent-cms-admin.azurewebsites.net Admin Panel: fluent-cms-admin.azurewebsites.net/admin Email: admin@cms.com Password: Admin1!","title":"Live Demo"},{"location":"#additional-resources","text":"GraphQL Playground: fluent-cms-admin.azurewebsites.net/graph Documentation: fluent-cms-admin.azurewebsites.net/doc/index.html","title":"Additional Resources"},{"location":"#examples-source-code","text":"example code can be found at /formCMS/examples for Sqlite: run the SqliteDemo project for SqlServer: run the SqlServerDemo/SqlServerAppHost project for PostgreSQL : run the PostgresDemo/PostgresAppHost project Defult login: - Eamil : samdmin@cms.com - Password: Admin1! After login to Admin Panel , you can go to Tasks , click Import Demo Data , to import demo data.","title":"Examples Source Code"},{"location":"#online-course-system-backend","text":"This section provides detailed guidance on developing a foundational online course system, encompassing key entities: teacher , course , lesson , skill , and material .","title":"Online Course System Backend"},{"location":"#database-schema","text":"","title":"Database Schema"},{"location":"#1-teachers-table","text":"The Teachers table maintains information about instructors, including their personal and professional details. Field Header Data Type id ID Int firstname First Name String lastname Last Name String email Email String phone_number Phone Number String image Image String bio Bio Text","title":"1. Teachers Table"},{"location":"#2-courses-table","text":"The Courses table captures the details of educational offerings, including their scope, duration, and prerequisites. Field Header Data Type id ID Int name Course Name String status Status String level Level String summary Summary String image Image String desc Description Text duration Duration String start_date Start Date Datetime","title":"2. Courses Table"},{"location":"#3-lessons-table","text":"The Lessons table contains detailed information about the lessons within a course, including their title, content, and associated teacher. Field Header Data Type id ID Int name Lesson Name String description Description Text teacher Teacher Int (Foreign Key) course Course Int (Foreign Key) created_at Created At Datetime updated_at Updated At Datetime","title":"3. Lessons Table"},{"location":"#4-skills-table","text":"The Skills table records competencies attributed to teachers. Field Header Data Type id ID Int name Skill Name String years Years of Experience Int created_by Created By String created_at Created At Datetime updated_at Updated At Datetime","title":"4. Skills Table"},{"location":"#5-materials-table","text":"The Materials table inventories resources linked to courses. Field Header Data Type id ID Int name Name String type Type String image Image String link Link String file File String","title":"5. Materials Table"},{"location":"#relationships","text":"Courses to Teachers : Man-to-One(Each teacher can teach multiple courses; each course is assigned to one teacher. A teacher can exist independently of a course). Teachers to Skills : Many-to-Many (Multiple teachers can share skills, and one teacher may have multiple skills). Courses to Materials : Many-to-Many (A course may include multiple materials, and the same material can be used in different courses). Courses to Lessons : One-to-Many (Each course can have multiple lessons, but each lesson belongs to one course. A lesson cannot exist without a course, as it has no meaning on its own).","title":"Relationships"},{"location":"#schema-creation-via-formcms-schema-builder","text":"","title":"Schema Creation via FormCMS Schema Builder"},{"location":"#accessing-schema-builder","text":"After launching the web application, locate the Schema Builder menu on the homepage to start defining your schema.","title":"Accessing Schema Builder"},{"location":"#adding-entities","text":"Example Configuration 1. Navigate to the Entities section of the Schema Builder. 2. Create entities such as \"Teacher\" and \"Course.\" 3. For the Course entity, add attributes such as name , status , level , and description .","title":"Adding Entities"},{"location":"#defining-relationships","text":"Example Configuration","title":"Defining Relationships"},{"location":"#1-course-and-teacher-many-to-one-relationship","text":"To establish a many-to-one relationship between the Course and Teacher entities, you can include a Lookup attribute in the Course entity. This allows selecting a single Teacher record when adding or updating a Course . Attribute Value Field teacher DataType Lookup DisplayType Lookup Options Teacher Description: When a course is created or modified, a teacher record can be looked up and linked to the course.","title":"1. Course and Teacher (Many-to-One Relationship)"},{"location":"#2-course-and-lessonone-to-many-relationship","text":"To establish a one-to-many relationship between the Course and Lesson entities, use a Collection attribute in the Course entity. This enables associating multiple lessons with a single course. Attribute Value Field lessons DataType Collection DisplayType EditTable Options Lesson Description: When managing a course , you can manage lessons of this course.","title":"2 Course and Lesson(One-to-Many Relationship)"},{"location":"#3-course-and-materials-many-to-many-relationship","text":"To establish a many-to-many relationship between the Course and Material entities, use a Junction attribute in the Course entity. This enables associating multiple materials with a single course. Attribute Value Field materials DataType Junction DisplayType Picklist Options Material Description: When managing a course, you can select multiple material records from the Material table to associate with the course.","title":"3. Course and Materials (Many-to-Many Relationship)"},{"location":"#admin-panel","text":"The last chapter introduced how to model entities, this chapter introduction how to use Admin-Panel to manage data of those entities.","title":"Admin Panel"},{"location":"#display-types","text":"The Admin Panel supports various UI controls to display attributes: \"text\" : Single-line text input. \"textarea\" : Multi-line text input. \"editor\" : Rich text input. \"number\" : Single-line text input for numeric values only. \"datetime\" : Datetime picker for date and time inputs. \"date\" : Date picker for date-only inputs. \"image\" : Upload a single image, storing the image URL. \"gallery\" : Upload multiple images, storing their URLs. \"file\" : Upload a file, storing the file URL. \"dropdown\" : Select an item from a predefined list. \"multiselect\" : Select multiple items from a predefined list. \"lookup\" : Select an item from another entity with a many-to-one relationship (requires Lookup data type). \"treeSelect\" : Select an item from another entity with a many-to-one relationship (requires Lookup data type), items are organized as tree. \"picklist\" : Select multiple items from another entity with a many-to-many relationship (requires Junction data type). \"tree\" : Select multiple items from another entity with a many-to-many relationship (requires Junction data type), items are organized as a tree. \"edittable\" : Manage items of a one-to-many sub-entity (requires Collection data type). See this example how to configure entity category , so it's item can be organized as tree.","title":"Display Types"},{"location":"#datatype-to-displaytype-mapping-table","text":"Below is a mapping of valid DataType and DisplayType combinations: DataType DisplayType Description Int Number Input for integers. Datetime Datetime Datetime picker for date and time inputs. Datetime Date Date picker for date-only inputs. String Number Input for numeric values. String Datetime Datetime picker for date and time inputs. String Date Date picker for date-only inputs. String Text Single-line text input. String Textarea Multi-line text input. String Image Single image upload. String Gallery Multiple image uploads. String File File upload. String Dropdown Select an item from a predefined list. String Multiselect Select multiple items from a predefined list. Text Multiselect Select multiple items from a predefined list. Text Gallery Multiple image uploads. Text Textarea Multi-line text input. Text Editor Rich text editor. Lookup Lookup Select an item from another entity. Lookup TreeSelect Select an item from another entity. Junction Picklist Select multiple items from another entity. Lookup Tree Select multiple items from another entity. Collection EditTable Manage items of a sub-entity.","title":"DataType to DisplayType Mapping Table"},{"location":"#list-page","text":"Example Course List Page The List Page displays entities in a tabular format, supporting sorting, searching, and pagination for efficient browsing or locating of specific records.","title":"List Page"},{"location":"#sorting","text":"Sort records by clicking the \u2191 or \u2193 icon in the table header. - Order by Created At Example - Order by Name Example","title":"Sorting"},{"location":"#filtering","text":"Apply filters by clicking the Funnel icon in the table header. Filter by Created At (2024-09-07) Filter by Course Name (Starts with A or C)","title":"Filtering"},{"location":"#duplicate","text":"Clicking the duplicate button opens the \"Add New Data\" page with prefilled values from the selected record for quick entry.","title":"Duplicate"},{"location":"#detail-page","text":"Detail page provides an interface to manage single record.","title":"Detail Page"},{"location":"#example-of-display-types-dateimage-gallery-muliselect-dropdown","text":"Lesson Detail Page .","title":"Example of display types date,image, gallery, muliselect, dropdown,"},{"location":"#example-of-lookuppicklistedittable","text":"Course Detail Page","title":"Example of lookup,picklist,edittable"},{"location":"#publish-preview-content","text":"This feature allows content creators to plan and organize their work, saving drafts for later completion.","title":"Publish / Preview Content"},{"location":"#content-publication-status","text":"Content can have one of the following publication statuses: - draft - scheduled - published - unpublished Only content with the status published can be retrieved through GraphQL queries.","title":"Content Publication Status"},{"location":"#setting-default-publication-status-in-the-schema-builder","text":"When defining an entity in the Schema Builder, you can configure its default publication status as either draft or published .","title":"Setting Default Publication Status in the Schema Builder"},{"location":"#managing-publication-status-in-the-admin-panel","text":"On the content edit page, you can: - Publish : Make content immediately available. - Unpublish : Remove content from public view. - Schedule : Set a specific date and time for the content to be published.","title":"Managing Publication Status in the Admin Panel"},{"location":"#preview-draftscheduledunpublished-content","text":"By default, only published content appears in query results. If you want to preview how the content looks on a page before publishing, you can add the query parameter preview=1 to the page URL. For a more convenient approach, you can set the Preview URL in the Entity Settings page. Example Entity Settings Page Once set, you can navigate to the Entity Management page and simply click the Preview button to view the content in preview mode. Example Content Manage Page","title":"Preview Draft/Scheduled/Unpublished Content"},{"location":"#publication-worker","text":"The Publication Worker automates the process of updating scheduled items in batches, transitioning them to the published status at the appropriate time.","title":"Publication Worker"},{"location":"#concurrent-update-protection","text":"Protect user from dirty write(concurrent update)","title":"Concurrent Update Protection"},{"location":"#how-does-it-work","text":"Return the updated_at timestamp when fetching the item. When updating, compare the stored updated_at with the one in the request. If they differ, reject the update","title":"How does it work?"},{"location":"#when-is-updatedat-checked","text":"During updates During Deletions If a concurrent modification is detected, the system will throw the following exception: \"Error: Concurrent Write Detected. Someone else has modified this item since you last accessed it. Please refresh the data and try again.\"","title":"When Is updatedAt Checked"},{"location":"#audit-logging","text":"Audit logging in FormCMS helps maintain accountability and provides a historical record of modifications made to entities within the system.","title":"Audit Logging"},{"location":"#audit-log-entity","text":"An audit log entry captures essential information about each modification. The entity structure includes the following fields: UserId ( string ): The unique identifier of the user performing the action. UserName ( string ): The name of the user. Action ( ActionType ): The type of action (Create, update, Delete) performed. EntityName ( string ): The name of the entity affected. RecordId ( string ): The unique identifier of the record modified. RecordLabel ( string ): A human-readable label for the record. Payload ( Record ): The data associated with the action. CreatedAt ( DateTime ): The timestamp when the action occurred.","title":"Audit Log Entity"},{"location":"#when-is-audit-log-added","text":"An audit log entry is created when a user performs any of the following actions: Creating a new record. Updating an existing record. Deleting a record.","title":"When Is Audit Log Added"},{"location":"#how-to-view-audit-log","text":"Audit logs can be accessed and searched by users with appropriate permissions. The following roles have access: Admin Super Admin These users can: - View a list of audit logs. - Search logs by user, entity, or action type. - Filter logs by date range.","title":"How to view Audit Log"},{"location":"#benefits-of-audit-logging","text":"Ensures transparency and accountability. Helps with troubleshooting and debugging. Provides insights into system usage and modifications. Supports compliance with regulatory requirements. By maintaining a detailed audit trail, the System enhances security and operational efficiency, ensuring that all modifications are tracked and can be reviewed when necessary.","title":"Benefits of Audit Logging"},{"location":"#export-and-import-data","text":"This feature allows you to export or import data This feature is helpful for the following scenarios: 1. Migrating data from one server to another, or even between different types of databases. 2. Backing up your data. 3. Cleaning data by exporting only the latest schema, excluding audit log data.","title":"Export and Import Data"},{"location":"#exporting-data","text":"Log in to the 'Admin Panel' and navigate to Tasks . Click Add Export Task . Wait a few minutes, then refresh the page. Once the task is complete, you can download the exported zip file.","title":"Exporting Data"},{"location":"#importing-data","text":"Log in to the 'Admin Panel' and go to Tasks . Click Add Import Task , then select the zip file you wish to import. Wait a few minutes, then refresh the page to check if the task was successful.","title":"Importing Data"},{"location":"#graphql-query","text":"FormCMS simplifies frontend development by offering robust GraphQL support.","title":"GraphQL Query"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#accessing-the-graphql-ide","text":"To get started, launch the web application and navigate to /graph . You can also try our online demo .","title":"Accessing the GraphQL IDE"},{"location":"#singular-vs-list-response","text":"For each entity in FormCMS, two GraphQL fields are automatically generated: - <entityName> : Returns a record. - <entityNameList> : Returns a list of records. **Single Course ** { course { id name } } Try it here **List of Courses ** { courseList { id name } } Try it here","title":"Singular vs. List Response"},{"location":"#field-selection","text":"You can query specific fields for both the current entity and its related entities. Example Query: { courseList{ id name teacher{ id firstname lastname skills{ id name } } materials{ id, name } } } Try it here","title":"Field Selection"},{"location":"#filtering-with-value-match-in-formcms","text":"FormCMS provides flexible filtering capabilities using the idSet field (or any other field), enabling precise data queries by matching either a single value or a list of values. Filter by a Single Value Example: { courseList(idSet: 5) { id name } } Try it here Filter by Multiple Values Example: { courseList(idSet: [5, 7]) { id name } } Try it here","title":"Filtering with Value Match in FormCMS"},{"location":"#advanced-filtering-with-operator-match-in-formcms","text":"FormCMS supports advanced filtering options with Operator Match , allowing users to combine various conditions for precise queries.","title":"Advanced Filtering with Operator Match in FormCMS"},{"location":"#matchall-example","text":"Filters where all specified conditions must be true. In this example: id > 5 and id < 15 . { courseList(id: {matchType: matchAll, gt: 5, lt: 15}) { id name } } Try it here","title":"matchAll Example:"},{"location":"#matchany-example","text":"Filters where at least one of the conditions must be true. In this example: name starts with \"A\" or name starts with \"I\" . { courseList(name: [{matchType: matchAny}, {startsWith: \"A\"}, {startsWith: \"I\"}]) { id name } } Try it here","title":"matchAny Example:"},{"location":"#filter-expressions-in-formcms","text":"Filter Expressions allow precise filtering by specifying a field, including nested fields using JSON path syntax. This enables filtering on subfields for complex data structures. Example: Filter by Teacher's Last Name This query returns courses taught by a teacher whose last name is \"Circuit.\" { courseList(filterExpr: {field: \"teacher.lastname\", clause: {equals: \"Circuit\"}}) { id name teacher { id lastname } } } Try it here","title":"Filter Expressions in FormCMS"},{"location":"#sorting_1","text":"Sorting by a single field { courseList(sort:nameDesc){ id, name } } Try it here Sorting by multiple fields { courseList(sort:[level,id]){ id, level name } } Try it here","title":"Sorting"},{"location":"#sort-expressions-in-formcms","text":"Sort Expressions allow sorting by nested fields using JSON path syntax. Example: Sort by Teacher's Last Name { courseList(sortExpr:{field:\"teacher.lastname\", order:Desc}) { id name teacher { id lastname } } } Try it here","title":"Sort Expressions in FormCMS"},{"location":"#pagination","text":"Pagination on root field { courseList(offset:2, limit:3){ id, name } } Try it here Pagination on sub field { courseList{ id, name materials(limit:2){ id, name } } } Try it here","title":"Pagination"},{"location":"#variable","text":"Variables are used to make queries more dynamic, reusable, and secure.","title":"Variable"},{"location":"#variable-in-value-filter","text":"query ($id: Int!) { teacher(idSet: [$id]) { id firstname lastname } } Try it here","title":"Variable in Value filter"},{"location":"#variable-in-operator-match-filter","text":"query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here","title":"Variable in Operator Match filter"},{"location":"#variable-in-filter-expression","text":"query ($years: String) { teacherList(filterExpr:{field:\"skills.years\",clause:{gt:$years}}){ id firstname lastname skills{ id name years } } } Try it here","title":"Variable in Filter Expression"},{"location":"#variable-in-sort","text":"query ($sort_field:TeacherSortEnum) { teacherList(sort:[$sort_field]) { id firstname lastname } } Try it here","title":"Variable in Sort"},{"location":"#variable-in-sort-expression","text":"query ($sort_order: SortOrderEnum) { courseList(sortExpr:{field:\"teacher.id\", order:$sort_order}){ id, name, teacher{ id, firstname } } } Try it here","title":"Variable in Sort Expression"},{"location":"#variable-in-pagination","text":"query ($offset:Int) { teacherList(limit:2, offset:$offset) { id firstname lastname } } Try it here","title":"Variable in Pagination"},{"location":"#required-vs-optional","text":"If you want a variable to be mandatory, you can add a ! to the end of the type query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here Explore the power of FormCMS GraphQL and streamline your development workflow!","title":"Required vs Optional"},{"location":"#saved-query","text":"Realtime queries may expose excessive technical details, potentially leading to security vulnerabilities. Saved Queries address this issue by abstracting the GraphQL query details. They allow clients to provide only variables, enhancing security while retaining full functionality.","title":"Saved Query"},{"location":"#transitioning-from-real-time-queries-to-saved-queries","text":"","title":"Transitioning from Real-Time Queries to Saved Queries"},{"location":"#using-operationname-as-the-saved-query-identifier","text":"In FormCMS, the Operation Name in a GraphQL query serves as a unique identifier for saved queries. For instance, executing the following query automatically saves it as TeacherQuery : query TeacherQuery($id: Int) { teacherList(idSet: [$id]) { id firstname lastname skills { id name } } } Try it here","title":"Using OperationName as the Saved Query Identifier"},{"location":"#saved-query-endpoints","text":"FormCMS generates two API endpoints for each saved query: List Records: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery Single Record: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/single/","title":"Saved Query Endpoints"},{"location":"#using-rest-api-query-strings-as-variables","text":"The Saved Query API allows passing variables via query strings: Single Value: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/?id=3 Array of Values: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?id=3&id=4 This passes [3, 4] to the idSet argument.","title":"Using REST API Query Strings as Variables"},{"location":"#additional-features-of-saved-query","text":"Beyond performance and security improvements, Saved Query introduces enhanced functionalities to simplify development workflows.","title":"Additional Features of Saved Query"},{"location":"#pagination-by-offset","text":"Built-in variables offset and limit enable efficient pagination. For example: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=2&offset=2","title":"Pagination by offset"},{"location":"#offset-pagination-for-subfields","text":"To display a limited number of subfield items (e.g., the first two skills of a teacher), use the JSON path variable, such as skills.limit : https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2","title":"offset Pagination for Subfields"},{"location":"#pagination-by-cursor","text":"For large datasets, offset pagination can strain the database. For example, querying with offset=1000&limit=10 forces the database to retrieve 1010 records and discard the first 1000. To address this, Saved Query supports cursor-based pagination , which reduces database overhead. Example response for https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3 : [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6M30\" }, { }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6NX0\" } ] If hasNextPage of the last record is true , use the cursor to retrieve the next page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&last=eyJpZCI6NX0 Similarly, if hasPreviousPage of the first record is true , use the cursor to retrieve the previous page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&first=eyJpZCI6Nn0","title":"Pagination by cursor"},{"location":"#cursor-based-pagination-for-subfields","text":"Subfields also support cursor-based pagination. For instance, querying https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2 returns a response like this: [ { \"id\": 3, \"firstname\": \"Jane\", \"lastname\": \"Debuggins\", \"hasPreviousPage\": false, \"skills\": [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6MSwic291cmNlSWQiOjN9\" }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6Miwic291cmNlSWQiOjN9\" } ], \"cursor\": \"eyJpZCI6M30\" } ] To fetch the next two skills, use the cursor: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/part/skills?limit=2&last=eyJpZCI6Miwic291cmNlSWQiOjN9","title":"Cursor-Based Pagination for Subfields"},{"location":"#drag-and-drop-page-designer","text":"The page designer utilizes the open-source GrapesJS and Handlebars, enabling seamless binding of GrapesJS Components with FormCMS Queries for dynamic content rendering.","title":"Drag and Drop Page Designer"},{"location":"#page-types-landing-page-detail-page-and-home-page","text":"","title":"Page Types: Landing Page, Detail Page, and Home Page"},{"location":"#landing-page","text":"A landing page is typically the first page a visitor sees. - URL format : /page/<pagename> - Structure : Comprised of multiple sections, each section retrieves data via a query . Example : Landing Page This page fetches data from: - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?status=featured - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?level=Advanced","title":"Landing Page"},{"location":"#detail-page_1","text":"A detail page provides specific information about an item. - URL format : /page/<pagename>/<router parameter> - Data Retrieval : FormCMS fetches data by passing the router parameter to a query . Example : Course Detail Page This page fetches data from: https://fluent-cms-admin.azurewebsites.net/api/queries/course/one?course_id=22","title":"Detail Page"},{"location":"#home-page","text":"The homepage is a special type of landing page named home . - URL format : /pages/home - Special Behavior : If no other route matches the path / , FormCMS renders /pages/home by default. Example : The URL / will be resolved to /pages/home unless explicitly overridden.","title":"Home Page"},{"location":"#introduction-to-grapesjs-panels","text":"Understanding the panels in GrapesJS is crucial for leveraging FormCMS's customization capabilities in the Page Designer UI. This section explains the purpose of each panel and highlights how FormCMS enhances specific areas to streamline content management and page design. Style Manager : Used to customize CSS properties of elements selected on the canvas. FormCMS Integration : This panel is left unchanged by FormCMS, as it already provides powerful styling options. Traits Panel : Allows modification of attributes for selected elements. FormCMS Integration : Custom traits are added to this panel, enabling users to bind data to components dynamically. Layers Panel : Displays a hierarchical view of elements on the page, resembling a DOM tree. FormCMS Integration : While FormCMS does not alter this panel, it\u2019s helpful for locating and managing FormCMS blocks within complex page designs. Blocks Panel : Contains pre-made components that can be dragged and dropped onto the page. FormCMS Integration : FormCMS enhances this panel by adding custom-designed blocks tailored for its CMS functionality. By familiarizing users with these panels and their integration points, this chapter ensures a smoother workflow and better utilization of FormCMS's advanced page-building tools.","title":"Introduction to GrapesJS Panels"},{"location":"#data-binding-singleton-or-list","text":"FormCMS leverages Handlebars expressions for dynamic data binding in pages and components.","title":"Data Binding: Singleton or List"},{"location":"#singleton","text":"Singleton fields are enclosed within {{ }} to dynamically bind individual values. Example Page Settings: Page Schema Settings Example Query: Retrieve Course Data Example Rendered Page: Rendered Course Page","title":"Singleton"},{"location":"#list","text":"Handlebars supports iterating over arrays using the {{#each}} block for repeating data structures. {{#each course}} <li>{{title}}</li> {{/each}} In FormCMS, you won\u2019t explicitly see the {{#each}} statement in the Page Designer. If a block's data source is set to data-list , the system automatically generates the loop. Example Page Settings: Page Schema Settings Example Rendered Page: Rendered List Page Example Queries: Featured Courses Advanced Level Courses","title":"List"},{"location":"#steps-to-bind-a-data-source","text":"To bind a Data List to a component, follow these steps: Drag a block from the Data List category in the Page Designer. Open the Layers Panel and select the Data List component. In the Traits Panel , configure the following fields: Field Description Query The query to retrieve data. Qs Query string parameters to pass (e.g., ?status=featured , ?level=Advanced ). Offset Number of records to skip. Limit Number of records to retrieve. Pagination Options for displaying content: - Button : Divides content into multiple pages with navigation buttons (e.g., \"Next,\" \"Previous,\" or numbered buttons). - Infinite Scroll : Automatically loads more content as users scroll. Ideal for a single component at the bottom of the page. - None : Displays all available content at once without requiring additional user actions.","title":"Steps to Bind a Data Source"},{"location":"#schema-version-control","text":"FormCMS saves each version of schemas, allowing users to roll back to earlier versions. Admins can freely test draft versions, while only published versions take effect.","title":"Schema Version Control"},{"location":"#requirements","text":"To illustrate this feature, let's take a Page as an example. Once a page is published, it becomes publicly accessible. You may need version control for two main reasons: You want to make changes but ensure they do not take effect until thoroughly tested. If issues arise in the latest version, you need the ability to roll back to a previous version.","title":"Requirements"},{"location":"#choosing-a-version","text":"After making changes, the latest version's status changes to draft in the Page List Page . To manage versions, click the View History button to navigate to the History Version List Page . Here, you can select any version and set it to published status.","title":"Choosing a Version"},{"location":"#testing-a-draft-version","text":"To preview a draft version, append sandbox=1 as a query parameter in the URL: Preview Draft Version Page . Alternatively, click the View Page button on the Page Design page.","title":"Testing a Draft Version"},{"location":"#compare-schema-changes","text":"You can compare the difference between different versions, use the Schema Diff Tool .","title":"Compare schema Changes"},{"location":"#duplicate_1","text":"You can duplicate any schema version and save it as a new schema.","title":"Duplicate"},{"location":"#online-course-system-frontend","text":"Having established our understanding of FormCMS essentials like Entity, Query, and Page, we're ready to build a frontend for an online course website.","title":"Online Course System Frontend"},{"location":"#key-pages","text":"Home Page ( home ) : The main entry point, featuring sections like Featured Courses and Advanced Courses . Each course links to its respective Course Details page. Course Details ( course/{course_id} ) : Offers detailed information about a specific course and includes links to the Teacher Details page. Teacher Details ( teacher/{teacher_id} ) : Highlights the instructor\u2019s profile and includes a section displaying their latest courses, which link back to the Course Details page. Home Page | | +-------------------+ | | v v Latest Courses Course Details | | | | v v Course Details <-------> Teacher Details","title":"Key Pages"},{"location":"#designing-the-home-page","text":"Drag and Drop Components : Use the FormCMS page designer to drag a Content-B component. Set Data Source : Assign the component's data source to the course query. Link Course Items : Configure the link for each course to /pages/course/{{id}} . The Handlebars expression {{id}} is dynamically replaced with the actual course ID during rendering.","title":"Designing the Home Page"},{"location":"#creating-the-course-details-page","text":"Page Setup : Name the page course/{course_id} to capture the course_id parameter from the URL (e.g., /pages/course/20 ). Query Configuration : The variable {course_id:20} is passed to the course query, generating a WHERE id IN (20) clause to fetch the relevant course data. Linking to Teacher Details : Configure the link for each teacher item on this page to /pages/teacher/{{teacher.id}} . Handlebars dynamically replaces {{teacher.id}} with the teacher\u2019s ID. For example, if a teacher object has an ID of 3, the link renders as /pages/teacher/3 .","title":"Creating the Course Details Page"},{"location":"#creating-the-teacher-details-page","text":"Page Setup : Define the page as teacher/{teacher_id} to capture the teacher_id parameter from the URL. Set Data Source : Assign the teacher query as the page\u2019s data source.","title":"Creating the Teacher Details Page"},{"location":"#adding-a-teachers-courses-section","text":"Drag a ECommerce A component onto the page. Set its data source to the course query, filtered by the teacher\u2019s ID ( WHERE teacher IN (3) ). When rendering the page, the PageService automatically passes the teacher_id (e.g., {teacher_id: 3} ) to the query.","title":"Adding a Teacher\u2019s Courses Section"},{"location":"#navigation-by-category","text":"","title":"Navigation by Category"},{"location":"#demo-of-category-tree-and-breadcrumb-navigation","text":"Category Tree Navigation : View Demo Breadcrumb Navigation : View Demo","title":"Demo of Category Tree and Breadcrumb Navigation"},{"location":"#creating-a-category-entity","text":"To create a category entity in the Schema Builder, include parent and children attributes. - Example Configuration : Edit Example","title":"Creating a Category Entity"},{"location":"#configuration-options-for-navigation","text":"DataType: lookup & DisplayType: TreeSelect Use this configuration to display a category as a property. Edit Example DataType: junction & DisplayType: Tree Use this configuration to enable category-based navigation. Edit Example","title":"Configuration Options for Navigation"},{"location":"#using-navigation-components-in-page-designer","text":"Tree Layer Menu : Use the Tree Layer Menu component for hierarchical navigation. Edit Example Breadcrumbs : Use the Breadcrumbs component to display navigation paths. Edit Example","title":"Using Navigation Components in Page Designer"},{"location":"#optimizing-caching","text":"FormCMS employs advanced caching strategies to boost performance. For detailed information on ASP.NET Core caching, visit the official documentation: ASP.NET Core Caching Overview .","title":"Optimizing Caching"},{"location":"#cache-schema","text":"FormCMS automatically invalidates schema caches whenever schema changes are made. The schema cache consists of two types: Entity Schema Cache Caches all entity definitions required to dynamically generate GraphQL types. Query Schema Cache Caches query definitions, including dependencies on multiple related entities, to compose efficient SQL queries. By default, schema caching is implemented using IMemoryCache . However, you can override this by providing a HybridCache . Below is a comparison of the two options:","title":"Cache Schema"},{"location":"#imemorycache","text":"Advantages : Simple to debug and deploy. Ideal for single-node web applications. Disadvantages : Not suitable for distributed environments. Cache invalidation on one node (e.g., Node A) does not propagate to other nodes (e.g., Node B).","title":"IMemoryCache"},{"location":"#hybridcache","text":"Key Features : Scalability : Combines the speed of local memory caching with the consistency of distributed caching. Stampede Resolution : Effectively handles cache stampede scenarios, as verified by its developers. Limitations : The current implementation lacks \"Backend-Assisted Local Cache Invalidation,\" meaning invalidation on one node does not instantly propagate to others. ** FormCMS Strategy**: FormCMS mitigates this limitation by setting the local cache expiration to 20 seconds (one-third of the distributed cache expiration, which is set to 60 seconds). This ensures cache consistency across nodes within 20 seconds, significantly improving upon the typical 60-second delay in memory caching. To implement a HybridCache , use the following code: builder.AddRedisDistributedCache(connectionName: CmsConstants.Redis); builder.Services.AddHybridCache();","title":"HybridCache"},{"location":"#cache-data","text":"FormCMS does not automatically invalidate data caches. Instead, it leverages ASP.NET Core's output caching for a straightforward implementation. Data caching consists of two types: Query Data Cache Caches the results of queries for faster access. Page Cache Caches the output of rendered pages for quick delivery. By default, output caching is disabled in FormCMS. To enable it, configure and inject the output cache as shown below: builder.Services.AddOutputCache(cacheOption => { cacheOption.AddBasePolicy(policyBuilder => policyBuilder.Expire(TimeSpan.FromMinutes(1))); cacheOption.AddPolicy(CmsOptions.DefaultPageCachePolicyName, b => b.Expire(TimeSpan.FromMinutes(2))); cacheOption.AddPolicy(CmsOptions.DefaultQueryCachePolicyName, b => b.Expire(TimeSpan.FromSeconds(1))); }); // After builder.Build(); app.UseOutputCache();","title":"Cache Data"},{"location":"#aspire-integration","text":"FormCMS leverages Aspire to simplify deployment.","title":"Aspire Integration"},{"location":"#architecture-overview","text":"A scalable deployment of FormCMS involves multiple web application nodes, a Redis server for distributed caching, and a database server, all behind a load balancer. +------------------+ | Load Balancer | +------------------+ | +-----------------+-----------------+ | | +------------------+ +------------------+ | Web App 1 | | Web App 2 | | +-----------+ | | +-----------+ | | | Local Cache| | | | Local Cache| | +------------------+ +------------------+ | | | | +-----------------+-----------------+ | | +------------------+ +------------------+ | Database Server | | Redis Server | +------------------+ +------------------+","title":"Architecture Overview"},{"location":"#local-emulation-with-aspire-and-service-discovery","text":"Example Web project on GitHub Example Aspire project on GitHub To emulate the production environment locally, FormCMS leverages Aspire. Here's an example setup: var builder = DistributedApplication.CreateBuilder(args); // Adding Redis and PostgreSQL services var redis = builder.AddRedis(name: CmsConstants.Redis); var db = builder.AddPostgres(CmsConstants.Postgres); // Configuring the web project with replicas and references builder.AddProject<Projects.FormCMS_Course>(name: \"web\") .WithEnvironment(CmsConstants.DatabaseProvider, CmsConstants.Postgres) .WithReference(redis) .WithReference(db) .WithReplicas(2); builder.Build().Run();","title":"Local Emulation with Aspire and Service Discovery"},{"location":"#benefits","text":"Simplified Configuration : No need to manually specify endpoints for the database or Redis servers. Configuration values can be retrieved using: csharp builder.Configuration.GetValue<string>(); builder.Configuration.GetConnectionString(); Realistic Testing : The local environment mirrors the production architecture, ensuring seamless transitions during deployment. By adopting these caching and deployment strategies, FormCMS ensures improved performance, scalability, and ease of configuration.","title":"Benefits:"},{"location":"#query-with-document-db","text":"Optimizing query performance by syncing relational data to a document database, such as MongoDB, significantly improves speed and scalability for high-demand applications.","title":"Query with Document DB"},{"location":"#limitations-of-aspnet-core-output-caching","text":"ASP.NET Core's output caching reduces database access when repeated queries are performed. However, its effectiveness is limited when dealing with numerous distinct queries: The application server consumes excessive memory to cache data. The same list might be cached multiple times in different orders. The database server experiences high load when processing numerous distinct queries simultaneously.","title":"Limitations of ASP.NET Core Output Caching"},{"location":"#using-document-databases-to-improve-query-performance","text":"For the query below, FormCMS joins the post , tag , category , and author tables: query post_sync($id: Int) { postList(idSet: [$id], sort: id) { id, title, body, abstract tag { id, name } category { id, name } author { id, name } } } By saving each post along with its related data as a single document in a document database, such as MongoDB, several improvements are achieved: - Reduced database server load since data retrieval from multiple tables is eliminated. - Reduced application server processing, as merging data is no longer necessary.","title":"Using Document Databases to Improve Query Performance"},{"location":"#performance-testing","text":"Using K6 scripts with 1,000 virtual users concurrently accessing the query API, the performance difference between PostgreSQL and MongoDB was tested, showing MongoDB to be significantly faster: export default function () { const id = Math.floor(Math.random() * 1000000) + 1; // Random id between 1 and 1,000,000 /* PostgreSQL */ // const url = `http://localhost:5091/api/queries/post_sync/?id=${id}`; /* MongoDB */ const url = `http://localhost:5091/api/queries/post/?id=${id}`; const res = http.get(url); check(res, { 'is status 200': (r) => r.status === 200, 'response time is < 200ms': (r) => r.timings.duration < 200, }); } /* MongoDB: http_req_waiting...............: avg=50.8ms min=774\u00b5s med=24.01ms max=3.23s p(90)=125.65ms p(95)=211.32ms PostgreSQL: http_req_waiting...............: avg=5.54s min=11.61ms med=4.08s max=44.67s p(90)=13.45s p(95)=16.53s */","title":"Performance Testing"},{"location":"#synchronizing-query-data-to-document-db","text":"","title":"Synchronizing Query Data to Document DB"},{"location":"#architecture-overview_1","text":"","title":"Architecture Overview"},{"location":"#enabling-message-publishing-in-webapp","text":"To enable publishing messages to the Message Broker, use Aspire to add a NATS resource. Detailed documentation is available in Microsoft Docs . Add the following line to the Aspire HostApp project: builder.AddNatsClient(AppConstants.Nats); Add the following lines to the WebApp project: builder.AddNatsClient(AppConstants.Nats); var entities = builder.Configuration.GetRequiredSection(\"TrackingEntities\").Get<string[]>()!; builder.Services.AddNatsMessageProducer(entities); FormCMS publishes events for changes made to entities listed in appsettings.json : { \"TrackingEntities\": [ \"post\" ] }","title":"Enabling Message Publishing in WebApp"},{"location":"#enabling-message-consumption-in-worker-app","text":"Add the following to the Worker App: var builder = Host.CreateApplicationBuilder(args); builder.AddNatsClient(AppConstants.Nats); builder.AddMongoDBClient(AppConstants.MongoCms); var apiLinksArray = builder.Configuration.GetRequiredSection(\"ApiLinksArray\").Get<ApiLinks[]>()!; builder.Services.AddNatsMongoLink(apiLinksArray); Define the ApiLinksArray in appsettings.json to specify entity changes and the corresponding query API: { \"ApiLinksArray\": [ { \"Entity\": \"post\", \"Api\": \"http://localhost:5001/api/queries/post_sync\", \"Collection\": \"post\", \"PrimaryKey\": \"id\" } ] } When changes occur to the post entity, the Worker Service calls the query API to retrieve aggregated data and saves it as a document.","title":"Enabling Message Consumption in Worker App"},{"location":"#migrating-query-data-to-document-db","text":"After adding a new entry to ApiLinksArray , the Worker App will perform a migration from the start to populate the Document DB.","title":"Migrating Query Data to Document DB"},{"location":"#replacing-queries-with-document-db","text":"","title":"Replacing Queries with Document DB"},{"location":"#architecture-overview_2","text":"To enable MongoDB queries in your WebApp, use the Aspire MongoDB integration. Details are available in Microsoft Docs . Add the following code to your WebApp: builder.AddMongoDBClient(connectionName: AppConstants.MongoCms); var queryLinksArray = builder.Configuration.GetRequiredSection(\"QueryLinksArray\").Get<QueryLinks[]>()!; builder.Services.AddMongoDbQuery(queryLinksArray); Define QueryLinksArray in appsettings.json to specify MongoDB queries: { \"QueryLinksArray\": [ { \"Query\": \"post\", \"Collection\": \"post\" }, { \"Query\": \"post_test_mongo\", \"Collection\": \"post\" } ] } The WebApp will now query MongoDB directly for the specified collections.","title":"Architecture Overview"},{"location":"#integrating-it-into-your-project","text":"Follow these steps to integrate FormCMS into your project using a NuGet package. You can reference the code from https://github.com/FormCMS/FormCMS/tree/main/examples Create a New ASP.NET Core Web Application . Add the NuGet Package : To add FormCMS, run the following command: dotnet add package FormCMS Modify Program.cs : Add the following line before builder.Build() to configure the database connection (use your actual connection string): builder.AddSqliteCms(\"Data Source=cms.db\"); var app = builder.Build(); Currently, FormCMS supports AddSqliteCms , AddSqlServerCms , and AddPostgresCms . Initialize FormCMS : Add this line after builder.Build() to initialize the CMS: await app.UseCmsAsync(); This will bootstrap the router and initialize the FormCMS schema table.","title":"Integrating it into Your Project"},{"location":"#adding-business-logic","text":"Learn how to customize your application by adding validation logic, hook functions, and producing events to Kafka.","title":"Adding Business Logic"},{"location":"#adding-validation-logic-with-simple-c-expressions","text":"","title":"Adding Validation Logic with Simple C# Expressions"},{"location":"#simple-c-validation","text":"You can define simple C# expressions in the Validation Rule of attributes using Dynamic Expresso . For example, a rule like name != null ensures the name attribute is not null. Additionally, you can specify a Validation Error Message to provide users with feedback when validation fails.","title":"Simple C# Validation"},{"location":"#using-regular-expressions","text":"Dynamic Expresso supports regular expressions, allowing you to write rules like Regex.IsMatch(email, \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\") . Note: Since Dynamic Expresso doesn't support verbatim strings , you must escape backslashes ( \\ ).","title":"Using Regular Expressions"},{"location":"#extending-functionality-with-hook-functions","text":"To implement custom business logic, such as verifying that a teacher entity has valid email and phone details, you can register hook functions to run before adding or updating records: var registry = app.GetHookRegistry(); // Hook function for pre-add validation registry.EntityPreAdd.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; }); // Hook function for pre-update validation registry.EntityPreUpdate.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; });","title":"Extending Functionality with Hook Functions"},{"location":"#producing-events-to-an-event-broker-eg-kafka","text":"To enable asynchronous business logic through an event broker like Kafka, you can produce events using hook functions. This feature requires just a few additional setup steps: Add the Kafka producer configuration: csharp builder.AddKafkaMessageProducer(\"localhost:9092\"); Register the message producer hook: csharp app.RegisterMessageProducerHook(); Here\u2019s a complete example: builder.AddSqliteCms(\"Data Source=cmsapp.db\").PrintVersion(); builder.AddKafkaMessageProducer(\"localhost:9092\"); var app = builder.Build(); await app.UseCmsAsync(false); app.RegisterMessageProducerHook(); With this setup, events are produced to Kafka, allowing consumers to process business logic asynchronously.","title":"Producing Events to an Event Broker (e.g., Kafka)"},{"location":"#development-guide","text":"The backend is written in ASP.NET Core, the Admin Panel uses React, and the Schema Builder is developed with jQuery.","title":"Development Guide"},{"location":"#overview","text":"The system comprises three main components: 1. Backend - Developed in ASP.NET Core. 2. Admin Panel - Built using React. 3. Schema Builder - Created with jQuery.","title":"Overview"},{"location":"#system-diagram","text":"","title":"System Diagram"},{"location":"#repository-links","text":"Backend Server Admin Panel UI Schema Builder","title":"Repository Links"},{"location":"#backend-server","text":"","title":"Backend Server"},{"location":"#tools","text":"ASP.NET Core SqlKata ( SqlKata Documentation )","title":"Tools"},{"location":"#architecture","text":"The backend is influenced by Domain-Driven Design (DDD). Code organization follows this diagram:","title":"Architecture"},{"location":"#core-domain-layer","text":"The Core layer encapsulates: - Descriptors : Includes Entity , Filter , Sort , and similar components for building queries. - HookFactory : Maintains a global Hook Registry , enabling developers to integrate custom plugins. Note : The Core layer is independent of both the Application and Infrastructure layers.","title":"Core (Domain Layer)"},{"location":"#application-layer","text":"The Application layer provides the following functionalities: 1. CMS : Entity CRUD, GraphQL Queries, and Page Designer. 2. Auth : Manages permissions and roles. 3. DataLink : Integrates DocumentDB and Event Streams for scalability. Includes Builders to configure Dependency Injection and manage Infrastructure components.","title":"Application Layer"},{"location":"#infrastructure-layer","text":"The Infrastructure layer defines reusable system infrastructural components. - Application services depend on interfaces instead of implementations. - Components are designed for portability and can be reused across other projects.","title":"Infrastructure Layer"},{"location":"#util-layer","text":"A separate Util component contains static classes with pure functions. - Accessible across all layers.","title":"Util Layer"},{"location":"#admin-panel-ui","text":"","title":"Admin Panel UI"},{"location":"#tools_1","text":"React PrimeReact ( PrimeReact UI Library ) SWR ( Data Fetching/State Management )","title":"Tools"},{"location":"#admin-panel-sequence","text":"","title":"Admin Panel Sequence"},{"location":"#schema-builder-ui","text":"","title":"Schema Builder UI"},{"location":"#tools_2","text":"jsoneditor ( JSON Editor Documentation )","title":"Tools"},{"location":"#testing-strategy","text":"This chapter describes the systems' automated testing strategy Favors integration testing over unit testing because integration tests can catch more real-world issues. For example, when inserting a record into the database, multiple modules are involved: - EntitiesHandler - EntitiesService - Entity (in core) - Query executors (e.g., SqlLite , Postgres , SqlServer ) Writing unit tests for each function and mocking its upstream and downstream services can be tedious. Instead, FormCMS focuses on checking the input and output of RESTful API endpoints in its integration tests.","title":"Testing Strategy"},{"location":"#integration-testing-for-formcmscourse-formcmsserverformcmscoursetests","text":"This project focuses on verifying the functionalities of the FormCMS.Course example project.","title":"Integration Testing for FormCMS.Course /formcms/server/FormCMS.Course.Tests"},{"location":"#new-feature-testing-formcmsserverformcmsapptests","text":"This project is dedicated to testing experimental functionalities, like MongoDB and Kafka plugins.","title":"New Feature Testing /formcms/server/FormCMS.App.Tests"}]}