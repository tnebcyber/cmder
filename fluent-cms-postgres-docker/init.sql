--
-- PostgreSQL database dump
--

-- Dumped from database version 16.3 (Debian 16.3-1.pgdg120+1)
-- Dumped by pg_dump version 16.3 (Debian 16.3-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW."updated_at" = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_updated_at_column() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: AspNetRoleClaims; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetRoleClaims" (
    "Id" integer NOT NULL,
    "RoleId" text NOT NULL,
    "ClaimType" text,
    "ClaimValue" text
);


ALTER TABLE public."AspNetRoleClaims" OWNER TO postgres;

--
-- Name: AspNetRoleClaims_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."AspNetRoleClaims" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."AspNetRoleClaims_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: AspNetRoles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetRoles" (
    "Id" text NOT NULL,
    "Name" character varying(256),
    "NormalizedName" character varying(256),
    "ConcurrencyStamp" text
);


ALTER TABLE public."AspNetRoles" OWNER TO postgres;

--
-- Name: AspNetUserClaims; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetUserClaims" (
    "Id" integer NOT NULL,
    "UserId" text NOT NULL,
    "ClaimType" text,
    "ClaimValue" text
);


ALTER TABLE public."AspNetUserClaims" OWNER TO postgres;

--
-- Name: AspNetUserClaims_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."AspNetUserClaims" ALTER COLUMN "Id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."AspNetUserClaims_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: AspNetUserLogins; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetUserLogins" (
    "LoginProvider" text NOT NULL,
    "ProviderKey" text NOT NULL,
    "ProviderDisplayName" text,
    "UserId" text NOT NULL
);


ALTER TABLE public."AspNetUserLogins" OWNER TO postgres;

--
-- Name: AspNetUserRoles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetUserRoles" (
    "UserId" text NOT NULL,
    "RoleId" text NOT NULL
);


ALTER TABLE public."AspNetUserRoles" OWNER TO postgres;

--
-- Name: AspNetUserTokens; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetUserTokens" (
    "UserId" text NOT NULL,
    "LoginProvider" text NOT NULL,
    "Name" text NOT NULL,
    "Value" text
);


ALTER TABLE public."AspNetUserTokens" OWNER TO postgres;

--
-- Name: AspNetUsers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AspNetUsers" (
    "Id" text NOT NULL,
    "UserName" character varying(256),
    "NormalizedUserName" character varying(256),
    "Email" character varying(256),
    "NormalizedEmail" character varying(256),
    "EmailConfirmed" boolean NOT NULL,
    "PasswordHash" text,
    "SecurityStamp" text,
    "ConcurrencyStamp" text,
    "PhoneNumber" text,
    "PhoneNumberConfirmed" boolean NOT NULL,
    "TwoFactorEnabled" boolean NOT NULL,
    "LockoutEnd" timestamp with time zone,
    "LockoutEnabled" boolean NOT NULL,
    "AccessFailedCount" integer NOT NULL
);


ALTER TABLE public."AspNetUsers" OWNER TO postgres;

--
-- Name: __EFMigrationsHistory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL
);


ALTER TABLE public."__EFMigrationsHistory" OWNER TO postgres;

--
-- Name: __schemas; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.__schemas (
    "id" integer NOT NULL,
    "name" character varying NOT NULL,
    "type" character varying(10) NOT NULL,
    "settings" text NOT NULL,
    "deleted" boolean DEFAULT false,
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE public.__schemas OWNER TO postgres;

--
-- Name: __schemas_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.__schemas ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."__schemas_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: author_post_cross; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.author_post_cross (
    id integer NOT NULL,
    post_id integer,
    author_id integer,
    deleted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.author_post_cross OWNER TO postgres;

--
-- Name: authors; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.authors (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    bio text,
    thumbnail_image character varying(255),
    featured_image character varying(255),
    deleted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    slug character varying(255)
);


ALTER TABLE public.authors OWNER TO postgres;

--
-- Name: authors_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.authors_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.authors_id_seq OWNER TO postgres;

--
-- Name: authors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.authors_id_seq OWNED BY public.authors.id;


--
-- Name: categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.categories (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    description text,
    parent_category_id integer,
    thumbnail_image character varying(255),
    featured_image character varying(255),
    deleted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    slug character varying(255)
);


ALTER TABLE public.categories OWNER TO postgres;

--
-- Name: categories_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.categories_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.categories_id_seq OWNER TO postgres;

--
-- Name: categories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.categories_id_seq OWNED BY public.categories.id;


--
-- Name: post_authors_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.post_authors_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.post_authors_id_seq OWNER TO postgres;

--
-- Name: post_authors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.post_authors_id_seq OWNED BY public.author_post_cross.id;


--
-- Name: post_tag_cross; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.post_tag_cross (
    id integer NOT NULL,
    post_id integer,
    tag_id integer,
    deleted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.post_tag_cross OWNER TO postgres;

--
-- Name: post_tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.post_tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.post_tags_id_seq OWNER TO postgres;

--
-- Name: post_tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.post_tags_id_seq OWNED BY public.post_tag_cross.id;


--
-- Name: posts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.posts (
    id integer NOT NULL,
    title character varying(255) NOT NULL,
    content text,
    category_id integer,
    thumbnail_image character varying(255),
    featured_image character varying(255),
    deleted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    slug character varying(255),
    published_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    excerpt character varying(1000),
    reading_time character varying(10)
);


ALTER TABLE public.posts OWNER TO postgres;

--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.posts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.posts_id_seq OWNER TO postgres;

--
-- Name: posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.posts_id_seq OWNED BY public.posts.id;


--
-- Name: tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tags (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    description text,
    thumbnail_image character varying(255),
    featured_image character varying(255),
    deleted boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    slug character varying(255)
);


ALTER TABLE public.tags OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.tags_id_seq OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.tags_id_seq OWNED BY public.tags.id;


--
-- Name: test; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.test (
    id integer NOT NULL,
    test character varying(255),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    deleted boolean DEFAULT false,
    publish_time timestamp without time zone
);


ALTER TABLE public.test OWNER TO postgres;

--
-- Name: test_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.test_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.test_id_seq OWNER TO postgres;

--
-- Name: test_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.test_id_seq OWNED BY public.test.id;


--
-- Name: author_post_cross id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.author_post_cross ALTER COLUMN id SET DEFAULT nextval('public.post_authors_id_seq'::regclass);


--
-- Name: authors id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.authors ALTER COLUMN id SET DEFAULT nextval('public.authors_id_seq'::regclass);


--
-- Name: categories id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories ALTER COLUMN id SET DEFAULT nextval('public.categories_id_seq'::regclass);


--
-- Name: post_tag_cross id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tag_cross ALTER COLUMN id SET DEFAULT nextval('public.post_tags_id_seq'::regclass);


--
-- Name: posts id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts ALTER COLUMN id SET DEFAULT nextval('public.posts_id_seq'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags ALTER COLUMN id SET DEFAULT nextval('public.tags_id_seq'::regclass);


--
-- Name: test id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.test ALTER COLUMN id SET DEFAULT nextval('public.test_id_seq'::regclass);


--
-- Data for Name: AspNetRoleClaims; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetRoleClaims" ("Id", "RoleId", "ClaimType", "ClaimValue") FROM stdin;
\.


--
-- Data for Name: AspNetRoles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetRoles" ("Id", "Name", "NormalizedName", "ConcurrencyStamp") FROM stdin;
\.


--
-- Data for Name: AspNetUserClaims; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetUserClaims" ("Id", "UserId", "ClaimType", "ClaimValue") FROM stdin;
\.


--
-- Data for Name: AspNetUserLogins; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetUserLogins" ("LoginProvider", "ProviderKey", "ProviderDisplayName", "UserId") FROM stdin;
\.


--
-- Data for Name: AspNetUserRoles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetUserRoles" ("UserId", "RoleId") FROM stdin;
\.


--
-- Data for Name: AspNetUserTokens; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetUserTokens" ("UserId", "LoginProvider", "Name", "Value") FROM stdin;
\.


--
-- Data for Name: AspNetUsers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."AspNetUsers" ("Id", "UserName", "NormalizedUserName", "Email", "NormalizedEmail", "EmailConfirmed", "PasswordHash", "SecurityStamp", "ConcurrencyStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnd", "LockoutEnabled", "AccessFailedCount") FROM stdin;
54e9776c-965f-4e7b-acbe-86ac4615059b	admin@cms.com	ADMIN@CMS.COM	admin@cms.com	ADMIN@CMS.COM	f	AQAAAAIAAYagAAAAEKxesNh26LnwnOVZzubNeoaQ+crb95H1SKupm/zHYO5ptGC9qqKgh6jU8XpUpBWEBQ==	2NW7BL3DB5SS2X43L35E6C2UEABHKQW4	433b7014-de1d-4db2-86d7-bcc640467ba1	\N	f	f	\N	t	0
\.


--
-- Data for Name: __EFMigrationsHistory; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."__EFMigrationsHistory" ("MigrationId", "ProductVersion") FROM stdin;
20240721131844_Init	8.0.6
\.


--
-- Data for Name: __schemas; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.__schemas ("id", "name", "type", "settings", "deleted") FROM stdin;
8	author	entity	{"Entity":{"Name":"author","TableName":"authors","Title":"Author","PrimaryKey":"id","TitleAttribute":"name","DefaultPageSize":20,"Attributes":[{"DataType":"Int","Field":"id","Header":"Id","InList":true,"InDetail":true,"IsDefault":true,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"name","Header":"Name","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"slug","Header":"Slug","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"thumbnail_image","Header":"Thumbnail Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"featured_image","Header":"Featured Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"created_at","Header":"Created At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"updated_at","Header":"Updated At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"bio","Header":"Bio","InList":false,"InDetail":true,"IsDefault":false,"Type":"editor","Options":"","Crosstable":null,"Lookup":null}]},"View":null,"Menu":null}	f
12	latest-posts	view	{"Entity":null,"View":{"Name":"latest-posts","AttributeNames":["id","title","category_id","thumbnail_image","published_at","authors","slug"],"EntityName":"post","PageSize":10,"Sorts":[{"FieldName":"published_at","Order":"Desc"}],"Filters":[]},"Menu":null}	f
13	post-by-slug	view	{"Entity":null,"View":{"Name":"post-by-slug","AttributeNames":null,"EntityName":"post","PageSize":0,"Sorts":[],"Filters":[{"FieldName":"slug","Operator":"and","Constraints":[{"Match":"in","Value":"querystring.slug","ResolvedValues":null}]}]},"Menu":null}	f
4	top-menu-bar	menu	{"Entity":null,"View":null,"Menu":{"Name":"top-menu-bar","MenuItems":[{"Icon":"pi-check","Label":"Posts","Url":"/entities/post","IsHref":false},{"Icon":"pi-bolt","Label":"Categories","Url":"/entities/category","IsHref":false},{"Icon":"pi-users","Label":"Authors","Url":"/entities/author","IsHref":false},{"Icon":"pi-hashtag","Label":"Tags","Url":"/entities/tag","IsHref":false},{"Icon":"pi-cog","Label":"Schema Builder","Url":"/schema-ui/list.html","IsHref":true}]}}	f
5	post	entity	{"Entity":{"Name":"post","TableName":"posts","Title":"Posts","PrimaryKey":"id","TitleAttribute":"title","DefaultPageSize":0,"Attributes":[{"DataType":"Int","Field":"id","Header":"Id","InList":true,"InDetail":true,"IsDefault":true,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"title","Header":"Title","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Datetime","Field":"published_at","Header":"Published At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"slug","Header":"Slug","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"reading_time","Header":"Reading Time","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Int","Field":"category_id","Header":"Category","InList":true,"InDetail":true,"IsDefault":false,"Type":"lookup","Options":"category","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"thumbnail_image","Header":"Thumbnail Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"featured_image","Header":"Featured Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"excerpt","Header":"excerpt","InList":false,"InDetail":true,"IsDefault":false,"Type":"textarea","Options":"","Crosstable":null,"Lookup":null},{"DataType":"String","Field":"authors","Header":"Authors","InList":false,"InDetail":true,"IsDefault":true,"Type":"crosstable","Options":"author","Crosstable":null,"Lookup":null},{"DataType":"String","Field":"tags","Header":"Tags","InList":false,"InDetail":true,"IsDefault":true,"Type":"crosstable","Options":"tag","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"content","Header":"Content","InList":false,"InDetail":true,"IsDefault":false,"Type":"editor","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Datetime","Field":"created_at","Header":"Created At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Datetime","Field":"updated_at","Header":"Updated At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null}]},"View":null,"Menu":null}	f
15	latest-post-slugs	view	{"Entity":null,"View":{"Name":"latest-post-slugs","AttributeNames":["id","slug","published_at"],"EntityName":"post","PageSize":1000,"Sorts":[{"FieldName":"published_at","Order":"Desc"}],"Filters":[]},"Menu":null}	f
7	category	entity	{"Entity":{"Name":"category","TableName":"categories","Title":"Categories","PrimaryKey":"id","TitleAttribute":"name","DefaultPageSize":20,"Attributes":[{"DataType":"Int","Field":"id","Header":"Id","InList":true,"InDetail":true,"IsDefault":true,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"name","Header":"Name","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Int","Field":"parent_category_id","Header":"Parent Category Id","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"featured_image","Header":"Featured Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"thumbnail_image","Header":"Thumbnail Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"description","Header":"Description","InList":false,"InDetail":true,"IsDefault":false,"Type":"editor","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"created_at","Header":"Created At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"updated_at","Header":"Updated At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"slug","Header":"Slug","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null}]},"View":null,"Menu":null}	f
16	tag	entity	{"Entity":{"Name":"tag","TableName":"tags","Title":"Tag","PrimaryKey":"id","TitleAttribute":"name","DefaultPageSize":20,"Attributes":[{"DataType":"Int","Field":"id","Header":"Id","InList":true,"InDetail":true,"IsDefault":true,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"name","Header":"Name","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"slug","Header":"Slug","InList":true,"InDetail":true,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"featured_image","Header":"Featured Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"thumbnail_image","Header":"Thumbnail Image","InList":true,"InDetail":true,"IsDefault":false,"Type":"image","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"created_at","Header":"Created At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"updated_at","Header":"Updated At","InList":true,"InDetail":false,"IsDefault":false,"Type":"text","Options":"","Crosstable":null,"Lookup":null},{"DataType":"Text","Field":"description","Header":"Description","InList":false,"InDetail":true,"IsDefault":false,"Type":"textarea","Options":"","Crosstable":null,"Lookup":null}]},"View":null,"Menu":null}	f
\.


--
-- Data for Name: author_post_cross; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.author_post_cross (id, post_id, author_id, deleted, created_at, updated_at) FROM stdin;
8	18	2	f	2024-06-25 19:32:12.180388	2024-06-25 19:32:12.180388
9	19	1	f	2024-06-25 19:36:51.499339	2024-06-25 19:36:51.499339
10	17	2	f	2024-06-25 19:37:13.949141	2024-06-25 19:37:13.949141
11	17	1	f	2024-06-25 19:37:13.949141	2024-06-25 19:37:13.949141
12	20	2	f	2024-06-26 11:07:33.837866	2024-06-26 11:07:33.837866
13	20	1	f	2024-06-26 11:07:33.837866	2024-06-26 11:07:33.837866
\.


--
-- Data for Name: authors; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.authors (id, name, bio, thumbnail_image, featured_image, deleted, created_at, updated_at, slug) FROM stdin;
2	Mark	<p>Mark Henderson is a passionate adventurer and environmental advocate with a penchant for exploring remote corners of the world. Born with a curiosity for nature and a love for photography, Mark has embarked on numerous expeditions to capture the beauty of landscapes and wildlife. His work not only showcases the breathtaking diversity of our planet but also raises awareness about conservation issues.</p><p>When he's not trekking through jungles or climbing mountains, Mark enjoys sharing his experiences through writing and public speaking. His captivating storytelling has inspired many to appreciate and protect the natural world. Mark holds a degree in Environmental Science and actively volunteers with organizations dedicated to preserving endangered habitats.</p><p>In his downtime, you can find Mark immersed in books about wildlife conservation, practicing photography techniques, or planning his next adventure to unravel the mysteries of our planet's most remote places.</p>	/2024-06/61706362.jpg	/2024-06/d177d46f.jpg	f	2024-06-23 10:43:35.304945	2024-06-25 18:39:49.515962	mark
1	Li Bai	<p>bi bai</p>	/2024-06/6f42f6e1.jpg	/2024-06/2e64b21a.jpg	f	2024-06-22 14:35:37.759317	2024-06-25 18:40:49.496054	li_bai
\.


--
-- Data for Name: categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.categories (id, name, description, parent_category_id, thumbnail_image, featured_image, deleted, created_at, updated_at, slug) FROM stdin;
1	food	<p>sss</p>	\N	/2024-06/8d1475de.jpg	/2024-06/e5d49e18.jpg	f	2024-06-21 23:35:02.712824	2024-06-22 14:10:42.120699	\N
2	drink	\N	\N	/2024-06/a6523761.jpg	/2024-06/d3d7e131.jpg	f	2024-06-22 14:11:16.897628	2024-06-22 14:11:16.897628	\N
\.


--
-- Data for Name: post_tag_cross; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.post_tag_cross (id, post_id, tag_id, deleted, created_at, updated_at) FROM stdin;
1	17	3	f	2024-06-26 13:53:11.771349	2024-06-26 13:53:11.771349
2	17	5	f	2024-06-26 13:57:33.403129	2024-06-26 13:57:33.403129
3	18	4	f	2024-06-26 13:57:47.705147	2024-06-26 13:57:47.705147
4	19	6	f	2024-06-26 14:00:21.445164	2024-06-26 14:00:21.445164
5	15	7	f	2024-06-26 14:02:21.352741	2024-06-26 14:02:21.352741
6	14	1	f	2024-06-26 14:03:26.250373	2024-06-26 14:03:26.250373
7	16	8	f	2024-06-26 14:05:06.420029	2024-06-26 14:05:06.420029
8	20	2	f	2024-06-26 14:05:25.381248	2024-06-26 14:05:25.381248
\.


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.posts (id, title, content, category_id, thumbnail_image, featured_image, deleted, created_at, updated_at, slug, published_at, excerpt, reading_time) FROM stdin;
17	The Perfect Pasta with Tomato Sauce: A Simple, Savory Delight	<h3>The Perfect Pasta with Tomato Sauce: A Simple, Savory Delight</h3><p>There’s something undeniably comforting about a plate of pasta with tomato sauce. This classic dish, loved by many around the globe, combines the richness of ripe tomatoes with the simplicity of pasta, creating a meal that's both hearty and delicious. Whether you’re a culinary novice or a seasoned chef, this dish is easy to prepare and perfect for any occasion. In this article, we explore the secrets to making the perfect pasta with tomato sauce, from selecting the freshest ingredients to mastering the art of sauce-making.</p>	1	/2024-06/4dcb37e2.jpg	/2024-06/d78c448d.jpg	f	2024-06-25 19:28:28.972535	2024-06-25 19:28:28.972535	perfect-pasta-with-tomato-sauce	2024-06-25 19:28:28.972535	There’s something undeniably comforting about a plate of pasta with tomato sauce. 	1 min
18	Mastering the Art of Dough: Tips and Techniques for Perfect Results	<h3><br></h3><h3>Mastering the Art of Dough: Tips and Techniques for Perfect Results</h3><p>Dough is a versatile and fundamental element in many beloved dishes across different cuisines. From the chewy crust of a pizza to the fluffy layers of a croissant, the quality of dough can make or break a recipe. Mastering the art of dough-making is not just about following a recipe; it's about understanding the science and techniques behind it.</p><p><br></p><h4>Types of Dough</h4><ol><li><strong>Yeast Dough</strong>: Commonly used for bread and pizza, yeast dough requires time to rise, allowing the yeast to ferment and create a light, airy texture.</li><li><strong>Shortcrust Pastry Dough</strong>: Ideal for pies and tarts, this dough is characterized by its crumbly texture. The key is to keep the butter cold and handle the dough minimally to avoid overworking it.</li><li><strong>Pasta Dough</strong>: Made with just flour and eggs, pasta dough is simple yet requires the right technique to achieve the perfect elasticity and texture.</li><li><strong>Choux Pastry Dough</strong>: Used for éclairs and profiteroles, choux pastry involves cooking the dough before baking it to create a light, airy product.</li></ol><h4>Essential Tips for Perfect Dough</h4><ol><li><strong>Use Quality Ingredients</strong>: Start with fresh, high-quality ingredients. For instance, using high-protein flour can improve the structure of your bread dough.</li><li><strong>Temperature Matters</strong>: The temperature of your ingredients, especially liquids and fats, can significantly affect the outcome. For yeast doughs, warm liquids help activate the yeast, while cold butter in pastry dough ensures flakiness.</li><li><strong>Proper Kneading</strong>: Kneading develops gluten, giving dough its structure and elasticity. For bread, knead until the dough is smooth and elastic. For pastry, minimal handling is key to a tender crust.</li><li><strong>Resting Time</strong>: Allowing the dough to rest is crucial. It helps to relax the gluten, making the dough easier to work with and improving the final texture.</li><li><strong>Practice and Patience</strong>: Dough-making is a skill that improves with practice. Don’t rush the process. Take your time to understand how the dough feels and responds.</li></ol><h4>Techniques for Different Dough Types</h4><ul><li><strong>Bread and Pizza Dough</strong>: Use the windowpane test to check if the dough is sufficiently kneaded. Stretch a small piece of dough; if it forms a thin, translucent membrane without tearing, it’s ready.</li><li><strong>Pastry Dough</strong>: Use a food processor or pastry cutter to incorporate cold butter into the flour quickly. This helps maintain the butter’s temperature, resulting in a flaky crust.</li><li><strong>Pasta Dough</strong>: Knead until the dough is smooth and elastic, then let it rest before rolling. Use a pasta machine for uniform thickness.</li><li><strong>Choux Pastry</strong>: Cook the dough on the stovetop until it pulls away from the sides of the pan. This step is essential for achieving the right consistency and structure.</li></ul><p>Mastering dough is a rewarding endeavor that opens up a world of culinary possibilities. With these tips and techniques, you'll be well on your way to creating perfect dough for any recipe. Happy baking!</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>	1	/2024-06/e344ff85.jpg	/2024-06/e16629c1.jpg	f	2024-06-25 19:32:05.347604	2024-06-25 19:32:05.347604	mastering-dough-tips-techniques	2024-06-25 19:32:05.347604	Dough is the foundation of countless culinary delights, from bread and pizza to pastries and pasta. Understanding the basics of dough-making can elevate your home baking and cooking to new heights. In this article, we’ll delve into the essential tips and techniques for preparing various types of dough, ensuring you achieve perfect results every time. Whether you’re kneading by hand or using a mixer, mastering dough is an art worth pursuing.	6 minutes
15	The Nutritional Powerhouses: Vegetables	<h2>The Nutritional Powerhouses: Vegetables</h2><p>Vegetables are a diverse group of plant foods that are essential for human health and well-being. They come in various shapes, sizes, colors, and flavors, and they are packed with a wide array of nutrients that play crucial roles in maintaining our body's functions. From leafy greens to root vegetables, each type offers unique health benefits. In this article, we will explore the importance of vegetables, their nutritional profiles, and tips on incorporating them into your daily diet.</p><p><br></p><h3>Nutritional Benefits</h3><ol><li><strong>Rich in Vitamins and Minerals</strong>: Vegetables are excellent sources of essential vitamins and minerals. Leafy greens like spinach and kale are rich in vitamins A, C, and K, as well as folate and iron. Root vegetables like carrots and sweet potatoes provide an abundance of vitamin A and potassium. Each vegetable variety contributes to a well-rounded nutrient intake.</li><li><strong>High in Fiber</strong>: Dietary fiber is crucial for digestive health. It helps maintain regular bowel movements, reduces the risk of constipation, and supports a healthy gut microbiome. Vegetables like broccoli, Brussels sprouts, and legumes are high in both soluble and insoluble fiber.</li><li><strong>Low in Calories</strong>: Most vegetables are low in calories, making them an excellent choice for those looking to manage their weight. They provide volume and satiety without adding excessive calories, helping to maintain a healthy energy balance.</li><li><strong>Antioxidants and Phytochemicals</strong>: Vegetables are rich in antioxidants and phytochemicals, which help protect the body against oxidative stress and inflammation. These compounds are linked to a reduced risk of chronic diseases, including heart disease, cancer, and diabetes. For example, tomatoes are high in lycopene, a powerful antioxidant.</li><li><strong>Hydration</strong>: Many vegetables have high water content, contributing to hydration. Cucumbers, lettuce, and zucchini are particularly hydrating and can help maintain fluid balance in the body.</li></ol><h3>Types of Vegetables</h3><ol><li><strong>Leafy Greens</strong>: Spinach, kale, Swiss chard, and arugula are packed with vitamins, minerals, and fiber. They are versatile and can be used in salads, smoothies, and stir-fries.</li><li><strong>Cruciferous Vegetables</strong>: Broccoli, cauliflower, Brussels sprouts, and cabbage are known for their cancer-fighting properties due to their high content of glucosinolates.</li><li><strong>Root Vegetables</strong>: Carrots, beets, radishes, and sweet potatoes are nutrient-dense and provide a good source of energy. They can be roasted, steamed, or eaten raw.</li><li><strong>Legumes</strong>: Beans, lentils, and peas are excellent plant-based protein sources and are rich in fiber. They can be added to soups, stews, and salads.</li><li><strong>Alliums</strong>: Onions, garlic, leeks, and shallots are known for their immune-boosting properties and are commonly used to add flavor to various dishes.</li></ol><h3>Tips for Incorporating More Vegetables</h3><ol><li><strong>Start Your Day with Vegetables</strong>: Add vegetables to your breakfast. Try a spinach and mushroom omelet or a smoothie with kale and avocado.</li><li><strong>Make Vegetables the Star</strong>: Create meals where vegetables are the main component, such as stir-fries, salads, and vegetable soups.</li><li><strong>Experiment with Cooking Methods</strong>: Try roasting, grilling, steaming, or sautéing vegetables to bring out different flavors and textures.</li><li><strong>Snack on Vegetables</strong>: Keep cut-up vegetables like carrots, celery, and bell peppers in the fridge for easy, healthy snacking.</li><li><strong>Add Vegetables to Every Meal</strong>: Incorporate vegetables into every meal. Add extra vegetables to pasta dishes, sandwiches, and casseroles.</li></ol><h3>Conclusion</h3><p>Vegetables are a vital part of a balanced diet, offering numerous health benefits that contribute to overall well-being. By consuming a variety of vegetables daily, you can ensure you are getting a wide range of nutrients that support your health. Whether you are looking to boost your nutrient intake, manage your weight, or simply enjoy delicious and wholesome foods, vegetables are the nutritional powerhouses that can help you achieve your health goals.</p>	1	/2024-06/35236d18.jpg	/2024-06/06e96649.jpg	f	2024-06-25 18:24:12.632804	2024-06-25 18:41:29.446896	the_nutritional_powerhouses_egetables	2024-06-25 18:24:12.632804	Vegetables are a vital part of a balanced diet, offering numerous health benefits that contribute to overall well-being. By consuming a variety of vegetables daily, you can ensure you are getting a wide range of nutrients that support your health. Whether you are looking to boost your nutrient intake, manage your weight, or simply enjoy delicious and wholesome foods, vegetables are the nutritional powerhouses that can help you achieve your health goals.\n\n\n\n\n\n\n	2 minutes
14	🍣 Sushi Sunday! 🍣	<p><strong>Caption:</strong> 🍣 Sushi Sunday!</p><p> 🍣 Indulging in some beautifully crafted sushi rolls tonight. Fresh, vibrant, and oh-so-delicious! What’s your favorite sushi roll?</p><p> 🍣🥢 #SushiLovers #Foodie #JapaneseCuisine #SushiArt #Yum</p><p><strong>Image Description:</strong> A vibrant image of a platter of sushi rolls, featuring a mix of colorful rolls with fresh ingredients like avocado, </p><p>salmon, tuna, and cucumber, garnished with pickled ginger, wasabi, and soy sauce.</p>	1	/2024-06/7d5445bc.jpg	/2024-06/b9413d5a.jpg	f	2024-06-24 23:45:40.976984	2024-06-25 18:42:21.745843	sushi_sunday	2024-06-24 23:45:40.976984	🍣 Indulging in some beautifully crafted sushi rolls tonight. Fresh, vibrant, and oh-so-delicious! What’s your favorite sushi roll?\n\n🍣🥢 #SushiLovers #Foodie #JapaneseCuisine #SushiArt #Yum	1 min
16	The Allure of the Classic Burger and Fries	<p>In the world of culinary delights, few meals can match the universal appeal of a classic burger and fries. This iconic combination, beloved by many across the globe, offers a harmonious blend of flavors, textures, and experiences that cater to a wide range of palates. The image before us encapsulates this timeless dish in all its glory—a juicy burger, crispy fries, and the tantalizing promise of satisfaction.</p><p><br></p><h3>The Burger: A Symphony of Ingredients</h3><p>At the heart of this culinary masterpiece is the burger itself. Nestled within a perfectly toasted bun lies a succulent beef patty, cooked to perfection. The patty, with its charred exterior and juicy interior, provides a rich and savory foundation for the burger. It’s complemented by crisp lettuce, adding a refreshing crunch, and a generous slice of tomato, offering a burst of juiciness. Melted cheese cascades over the patty, bringing a creamy texture and a hint of sharpness that balances the meat's robustness.</p><p>Adding to this flavor profile are the crispy strips of bacon, which introduce a smoky and salty element. The burger is further elevated by a dollop of sauce—most likely a zesty mayo or a tangy ketchup—that binds all the ingredients together, ensuring each bite is a well-rounded taste explosion.</p><p><br></p><h3>The Fries: Golden Perfection</h3><p>No burger experience is complete without a side of fries. These golden, crispy delights are the epitome of comfort food. Each fry is meticulously cut to achieve the perfect balance of a crispy exterior and a fluffy interior. Lightly salted, they serve as the ideal companion to the burger, offering a satisfying crunch that contrasts beautifully with the burger’s tender bite.</p><p><br></p><h3>The Experience: More Than Just a Meal</h3><p>Beyond the flavors and textures, a burger and fries meal is about the experience. It’s a casual yet indulgent affair, often enjoyed in the company of friends and family. Whether it’s a sunny afternoon at a backyard barbecue or a cozy evening at a favorite diner, this meal brings people together, fostering a sense of community and shared enjoyment.</p><p><br></p><h3>Conclusion: A Timeless Favorite</h3><p>The classic burger and fries have stood the test of time for a reason. They are more than just food—they are a celebration of flavor, texture, and the simple joys of life. As we gaze upon this image, we are reminded of the universal love for this iconic duo, and the countless memories made over a plate of this beloved meal. So next time you take a bite of that burger or reach for a crispy fry, remember that you’re not just enjoying a meal—you’re partaking in a timeless tradition that continues to bring joy to millions.</p>	1	/2024-06/d0624b06.jpg	/2024-06/43879826.jpg	f	2024-06-25 19:24:04.682343	2024-06-25 19:24:04.682343	the-allure-of-the-classic-burger-and-fries	2024-06-25 19:24:04.682343	In the world of culinary delights, few meals can match the universal appeal of a classic burger and fries. This iconic combination, beloved by many across the globe, offers a harmonious blend of flavors, textures, and experiences that cater to a wide range of palates. The image before us encapsulates this timeless dish in all its glory—a juicy burger, crispy fries, and the tantalizing promise of satisfaction.\n\n	3 min
20	The Ultimate Guide to Bacon: From Sizzling Strips to Culinary Delights	<h3><br></h3><h3>The Ultimate Guide to Bacon: From Sizzling Strips to Culinary Delights</h3><p>Bacon is more than just a breakfast staple; it’s a culinary superstar that has found its way into a diverse array of dishes, from appetizers to desserts. Its unique combination of smoky, salty, and slightly sweet flavors makes it a favorite for many. In this comprehensive guide, we delve into the fascinating history of bacon, explore its various types, and provide creative ideas for incorporating it into your cooking.</p><p><br></p><h4>The History of Bacon</h4><p>Bacon has a long and storied history that dates back thousands of years. Ancient civilizations, including the Chinese and Romans, preserved pork bellies with salt to create early versions of bacon. Over the centuries, the methods of curing and smoking pork evolved, leading to the delicious bacon we know today.</p><p><br></p><h4>Types of Bacon</h4><ol><li><strong>Streaky Bacon</strong>: The most common type, known for its alternating layers of fat and meat, providing a perfect balance of crispy and tender textures.</li><li><strong>Back Bacon</strong>: Often referred to as Canadian bacon, it is leaner and meatier, cut from the loin of the pig.</li><li><strong>Pancetta</strong>: An Italian style of bacon that is cured but not smoked, usually rolled into a cylinder and used in various Mediterranean dishes.</li><li><strong>Turkey Bacon</strong>: A lower-fat alternative made from turkey meat, offering a different texture and flavor but still delivering that beloved bacon taste.</li></ol><h4>Creative Ways to Use Bacon</h4><ol><li><strong>Classic Breakfast</strong>: Serve crispy bacon strips alongside eggs, toast, and fresh fruit for a hearty start to the day.</li><li><strong>Salads</strong>: Add crumbled bacon to salads for an extra layer of flavor and crunch. It pairs particularly well with spinach, tomatoes, and a tangy vinaigrette.</li><li><strong>Sandwiches and Burgers</strong>: Enhance your sandwiches and burgers with a few strips of bacon. Its smoky flavor complements a wide range of ingredients, from avocados to blue cheese.</li><li><strong>Bacon-Wrapped Delights</strong>: Wrap bacon around meats, vegetables, or even fruits like dates or apples, then bake or grill to create irresistible appetizers.</li><li><strong>Bacon in Sweets</strong>: Explore the sweet and savory combination by adding bacon to desserts like chocolate brownies, maple bacon cupcakes, or even bacon ice cream.</li><li><strong>Bacon Bits</strong>: Make your own bacon bits by cooking and finely chopping bacon. Use them to top baked potatoes, mac and cheese, or soups for added flavor and texture.</li></ol><h4>Tips for Cooking Bacon</h4><ol><li><strong>Pan-Frying</strong>: Lay bacon strips in a cold pan and cook over medium heat, turning occasionally until crispy. This method allows the fat to render slowly, resulting in evenly cooked bacon.</li><li><strong>Baking</strong>: For less mess and more even cooking, bake bacon in the oven. Place strips on a baking sheet lined with parchment paper and bake at 400°F (200°C) for 15-20 minutes.</li><li><strong>Microwaving</strong>: Quick and convenient, microwaving bacon on a microwave-safe plate lined with paper towels can yield crispy results in minutes.</li><li><strong>Grilling</strong>: For a smoky flavor, cook bacon on the grill. This method adds an extra layer of charred goodness.</li></ol><p>Bacon is a versatile ingredient that can transform any dish with its rich, savory profile. Whether you prefer it crispy or chewy, streaky or lean, there’s no denying the culinary magic of bacon. Use this guide to experiment and elevate your meals with the irresistible taste of bacon.</p>	1	/2024-06/52ed1bf7.jpg	/2024-06/c9ec3f8b.jpg	f	2024-06-26 11:07:25.455372	2024-06-26 15:31:27.582873	ultimate-guide-to-bacon	2024-06-26 11:07:25.455372	Bacon is a beloved ingredient that has earned its place in kitchens and hearts around the world. Its irresistible aroma, crispy texture, and savory flavor make it a versatile addition to countless dishes. In this article, we explore the history of bacon, its various types, and creative ways to incorporate it into your meals. Whether you’re a bacon enthusiast or just discovering its culinary potential, this guide will help you make the most of this iconic ingredient.	3 min
19	 Fresh and Flavorful: Crafting the Perfect Fish Salad	<h3><br></h3><h3>Fresh and Flavorful: Crafting the Perfect Fish Salad</h3><p>Fish salad is a versatile and refreshing dish that combines the best of the sea with the crispness of fresh vegetables and the zing of flavorful dressings. Whether you’re looking for a light lunch or a satisfying dinner, fish salad offers a nutritious and delicious option that can be easily tailored to your preferences.</p><h4>Choosing the Right Fish</h4><ol><li><strong>Salmon</strong>: Rich in omega-3 fatty acids, salmon is a popular choice for fish salads. Its firm texture holds up well in a salad, and its flavor pairs nicely with a variety of dressings.</li><li><strong>Tuna</strong>: Both fresh and canned tuna are excellent options. Fresh tuna can be seared and sliced for a gourmet touch, while canned tuna offers convenience and versatility.</li><li><strong>Cod</strong>: A mild, flaky fish, cod absorbs flavors well and can be baked or poached for a light and tender addition to your salad.</li><li><strong>Shrimp</strong>: While not a fish, shrimp is a fantastic addition to seafood salads, adding a sweet and slightly briny flavor with a firm texture.</li></ol><h4>Key Ingredients for a Balanced Salad</h4><ol><li><strong>Leafy Greens</strong>: Start with a base of fresh greens such as arugula, spinach, or mixed salad greens. These provide a nutritious foundation and a crisp contrast to the fish.</li><li><strong>Colorful Vegetables</strong>: Add a variety of vegetables for color, texture, and additional nutrients. Bell peppers, cherry tomatoes, cucumbers, and red onions are great choices.</li><li><strong>Healthy Fats</strong>: Incorporate healthy fats like avocado slices or a sprinkle of nuts and seeds to add richness and enhance satiety.</li><li><strong>Fresh Herbs</strong>: Fresh herbs like dill, cilantro, or parsley can elevate the flavors of your salad and add a burst of freshness.</li><li><strong>Dressings</strong>: Choose a dressing that complements the fish. Lemon vinaigrette, tahini dressing, or a classic olive oil and balsamic vinegar mix are excellent options.</li></ol><h4>Tips for Creating the Perfect Fish Salad</h4><ol><li><strong>Cook the Fish Properly</strong>: Whether you’re grilling, baking, or poaching, ensure the fish is cooked just right. Overcooked fish can become dry and tough, while undercooked fish can be unsafe to eat.</li><li><strong>Balance Flavors and Textures</strong>: Aim for a balance of flavors—sweet, salty, tangy, and umami—and a mix of textures—crunchy, creamy, and tender.</li><li><strong>Use Fresh Ingredients</strong>: Freshness is key in a salad. Use the freshest vegetables and herbs available, and opt for high-quality fish to ensure the best flavor and texture.</li><li><strong>Dress Lightly</strong>: Dress the salad lightly to enhance the natural flavors of the ingredients without overwhelming them. Add the dressing just before serving to keep the greens crisp.</li><li><strong>Serve Immediately</strong>: For the best texture and flavor, serve your fish salad immediately after preparing it.</li></ol><h3>Example Recipe: Mediterranean Salmon Salad</h3><p><strong>Ingredients:</strong></p><ul><li>2 salmon fillets</li><li>4 cups mixed greens</li><li>1 cup cherry tomatoes, halved</li><li>1 cucumber, sliced</li><li>1/2 red onion, thinly sliced</li><li>1/4 cup Kalamata olives, pitted and sliced</li><li>1 avocado, diced</li><li>2 tablespoons fresh dill, chopped</li><li>Lemon vinaigrette (juice of 1 lemon, 1/4 cup olive oil, salt, and pepper to taste)</li></ul><p><strong>Instructions:</strong></p><ol><li>Preheat the oven to 375°F (190°C). Season the salmon fillets with salt and pepper. Bake for 12-15 minutes, until the salmon is cooked through.</li><li>In a large bowl, combine the mixed greens, cherry tomatoes, cucumber, red onion, olives, avocado, and dill.</li><li>Flake the cooked salmon into large pieces and add to the salad.</li><li>Drizzle with lemon vinaigrette and toss gently to combine.</li><li>Serve immediately and enjoy the fresh, vibrant flavors.</li></ol><p>Crafting the perfect fish salad is all about balance and freshness. With these tips and a bit of creativity, you can create a delightful dish that’s both nutritious and bursting with flavor.</p>	1	/2024-06/608341b9.jpg	/2024-06/0ec3dab3.jpg	f	2024-06-25 19:36:13.157647	2024-06-26 15:28:58.901536	perfect-fish-salad-recipe	2024-06-25 19:36:13.157647	Fish salad is a delightful dish that combines the freshness of seafood with vibrant vegetables and zesty dressings. Perfect for a light lunch or a refreshing dinner, this versatile meal can be customized to suit your tastes. In this article, we’ll explore the best types of fish to use, key ingredients for a balanced salad, and tips for creating a dish that is both nutritious and delicious.	5 minutes
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tags (id, name, description, thumbnail_image, featured_image, deleted, created_at, updated_at, slug) FROM stdin;
1	susi	\N	/2024-06/1077471c.jpg	/2024-06/16461a33.jpg	f	2024-06-26 13:25:01.561724	2024-06-26 13:26:57.489468	susi
2	bacon	\N	/2024-06/2897ef47.jpg	/2024-06/2ae516a8.jpg	f	2024-06-26 13:28:28.953878	2024-06-26 13:28:28.953878	bacon
3	pasta	\N	/2024-06/df999498.jpg	/2024-06/40eb1ae6.jpg	f	2024-06-26 13:30:06.631695	2024-06-26 13:30:06.631695	pasta
4	dough	\N	/2024-06/b98978c5.jpg	/2024-06/9948b531.jpg	f	2024-06-26 13:54:58.008995	2024-06-26 13:54:58.008995	dough
5	saurce	\N	/2024-06/e70a0e47.jpg	/2024-06/359760de.jpg	f	2024-06-26 13:56:22.696851	2024-06-26 13:57:21.924884	saurce
6	salad	\N	/2024-06/390bc67d.jpg	/2024-06/54f1ce0c.jpg	f	2024-06-26 13:59:40.981228	2024-06-26 13:59:40.981228	salad
7	Vegetable	\N	/2024-06/f9dca969.jpg	/2024-06/d43c6020.jpg	f	2024-06-26 14:01:45.111417	2024-06-26 14:01:45.111417	vegetable
8	burger	\N	/2024-06/df30355c.jpg	/2024-06/1fb6cec0.jpg	f	2024-06-26 14:04:45.979275	2024-06-26 14:04:45.979275	burger
\.


--
-- Data for Name: test; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.test (id, test, created_at, updated_at, deleted, publish_time) FROM stdin;
1	中文	2024-07-06 16:59:39.909937	2024-07-06 16:59:39.909937	f	2024-07-06 12:59:20.671
\.


--
-- Name: AspNetRoleClaims_Id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."AspNetRoleClaims_Id_seq"', 1, false);


--
-- Name: AspNetUserClaims_Id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."AspNetUserClaims_Id_seq"', 1, false);


--
-- Name: __schemas_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."__schemas_id_seq"', 18, true);


--
-- Name: authors_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.authors_id_seq', 2, true);


--
-- Name: categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.categories_id_seq', 2, true);


--
-- Name: post_authors_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.post_authors_id_seq', 15, true);


--
-- Name: post_tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.post_tags_id_seq', 8, true);


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.posts_id_seq', 20, true);


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tags_id_seq', 8, true);


--
-- Name: test_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.test_id_seq', 1, true);


--
-- Name: AspNetRoleClaims PK_AspNetRoleClaims; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetRoleClaims"
    ADD CONSTRAINT "PK_AspNetRoleClaims" PRIMARY KEY ("Id");


--
-- Name: AspNetRoles PK_AspNetRoles; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetRoles"
    ADD CONSTRAINT "PK_AspNetRoles" PRIMARY KEY ("Id");


--
-- Name: AspNetUserClaims PK_AspNetUserClaims; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserClaims"
    ADD CONSTRAINT "PK_AspNetUserClaims" PRIMARY KEY ("Id");


--
-- Name: AspNetUserLogins PK_AspNetUserLogins; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserLogins"
    ADD CONSTRAINT "PK_AspNetUserLogins" PRIMARY KEY ("LoginProvider", "ProviderKey");


--
-- Name: AspNetUserRoles PK_AspNetUserRoles; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserRoles"
    ADD CONSTRAINT "PK_AspNetUserRoles" PRIMARY KEY ("UserId", "RoleId");


--
-- Name: AspNetUserTokens PK_AspNetUserTokens; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserTokens"
    ADD CONSTRAINT "PK_AspNetUserTokens" PRIMARY KEY ("UserId", "LoginProvider", "Name");


--
-- Name: AspNetUsers PK_AspNetUsers; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUsers"
    ADD CONSTRAINT "PK_AspNetUsers" PRIMARY KEY ("Id");


--
-- Name: __EFMigrationsHistory PK___EFMigrationsHistory; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."__EFMigrationsHistory"
    ADD CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId");


--
-- Name: __schemas PK___schemas; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.__schemas
    ADD CONSTRAINT "PK___schemas" PRIMARY KEY ("id");


--
-- Name: authors authors_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.authors
    ADD CONSTRAINT authors_pkey PRIMARY KEY (id);


--
-- Name: categories categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


--
-- Name: author_post_cross post_authors_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.author_post_cross
    ADD CONSTRAINT post_authors_pkey PRIMARY KEY (id);


--
-- Name: post_tag_cross post_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tag_cross
    ADD CONSTRAINT post_tags_pkey PRIMARY KEY (id);


--
-- Name: posts posts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: test test_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.test
    ADD CONSTRAINT test_pkey PRIMARY KEY (id);


--
-- Name: EmailIndex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "EmailIndex" ON public."AspNetUsers" USING btree ("NormalizedEmail");


--
-- Name: IX_AspNetRoleClaims_RoleId; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "IX_AspNetRoleClaims_RoleId" ON public."AspNetRoleClaims" USING btree ("RoleId");


--
-- Name: IX_AspNetUserClaims_UserId; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "IX_AspNetUserClaims_UserId" ON public."AspNetUserClaims" USING btree ("UserId");


--
-- Name: IX_AspNetUserLogins_UserId; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "IX_AspNetUserLogins_UserId" ON public."AspNetUserLogins" USING btree ("UserId");


--
-- Name: IX_AspNetUserRoles_RoleId; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "IX_AspNetUserRoles_RoleId" ON public."AspNetUserRoles" USING btree ("RoleId");


--
-- Name: RoleNameIndex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "RoleNameIndex" ON public."AspNetRoles" USING btree ("NormalizedName");


--
-- Name: UserNameIndex; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "UserNameIndex" ON public."AspNetUsers" USING btree ("NormalizedUserName");

--
-- Name: __schemas update___schemas_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update___schemas_updated_at BEFORE UPDATE ON public.__schemas FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: authors update_authors_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_authors_updated_at BEFORE UPDATE ON public.authors FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: categories update_categories_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON public.categories FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: author_post_cross update_post_authors_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_post_authors_updated_at BEFORE UPDATE ON public.author_post_cross FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: post_tag_cross update_post_tags_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_post_tags_updated_at BEFORE UPDATE ON public.post_tag_cross FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: posts update_posts_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_posts_updated_at BEFORE UPDATE ON public.posts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: tags update_tags_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_tags_updated_at BEFORE UPDATE ON public.tags FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: test update_test_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_test_updated_at BEFORE UPDATE ON public.test FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: AspNetRoleClaims FK_AspNetRoleClaims_AspNetRoles_RoleId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetRoleClaims"
    ADD CONSTRAINT "FK_AspNetRoleClaims_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES public."AspNetRoles"("Id") ON DELETE CASCADE;


--
-- Name: AspNetUserClaims FK_AspNetUserClaims_AspNetUsers_UserId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserClaims"
    ADD CONSTRAINT "FK_AspNetUserClaims_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES public."AspNetUsers"("Id") ON DELETE CASCADE;


--
-- Name: AspNetUserLogins FK_AspNetUserLogins_AspNetUsers_UserId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserLogins"
    ADD CONSTRAINT "FK_AspNetUserLogins_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES public."AspNetUsers"("Id") ON DELETE CASCADE;


--
-- Name: AspNetUserRoles FK_AspNetUserRoles_AspNetRoles_RoleId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserRoles"
    ADD CONSTRAINT "FK_AspNetUserRoles_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES public."AspNetRoles"("Id") ON DELETE CASCADE;


--
-- Name: AspNetUserRoles FK_AspNetUserRoles_AspNetUsers_UserId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserRoles"
    ADD CONSTRAINT "FK_AspNetUserRoles_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES public."AspNetUsers"("Id") ON DELETE CASCADE;


--
-- Name: AspNetUserTokens FK_AspNetUserTokens_AspNetUsers_UserId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AspNetUserTokens"
    ADD CONSTRAINT "FK_AspNetUserTokens_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES public."AspNetUsers"("Id") ON DELETE CASCADE;


--
-- Name: categories categories_parent_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_parent_category_id_fkey FOREIGN KEY (parent_category_id) REFERENCES public.categories(id);


--
-- Name: author_post_cross post_authors_author_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.author_post_cross
    ADD CONSTRAINT post_authors_author_id_fkey FOREIGN KEY (author_id) REFERENCES public.authors(id);


--
-- Name: author_post_cross post_authors_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.author_post_cross
    ADD CONSTRAINT post_authors_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id);


--
-- Name: post_tag_cross post_tags_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tag_cross
    ADD CONSTRAINT post_tags_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id);


--
-- Name: post_tag_cross post_tags_tag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tag_cross
    ADD CONSTRAINT post_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id);


--
-- Name: posts posts_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id);


--
-- PostgreSQL database dump complete
--

