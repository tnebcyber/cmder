{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Fluent CMS ! If you'd like to contribute to the project, please check out our CONTRIBUTING guide .Don\u2019t forget to give us a star \u2b50 if you find Fluent CMS helpful! What is Fluent CMS? Fluent CMS is an open-source Content Management System designed to simplify and accelerate web development workflows. While it's particularly suited for CMS projects, it is also highly beneficial for general web applications, reducing the need for repetitive REST/GraphQL API development. Effortless CRUD Operations: Fluent CMS includes built-in RESTful APIs for Create, Read, Update, and Delete (CRUD) operations, complemented by a React-based admin panel for efficient data management. Powerful GraphQL Queries: Access multiple related entities in a single query, enhancing client-side performance, security, and flexibility. Drag-and-Drop Page Designer: Build dynamic pages effortlessly using the integrated page designer powered by Grapes.js and Handlebars . Easily bind data sources for an interactive and streamlined design experience. Online Course System Demo Source Code Example Blog Project on GitHub Live Demo Public Site: fluent-cms-admin.azurewebsites.net Admin Panel: fluent-cms-admin.azurewebsites.net/admin Email: admin@cms.com Password: Admin1! Additional Resources GraphQL Playground: fluent-cms-admin.azurewebsites.net/graph Documentation: fluent-cms-admin.azurewebsites.net/doc/index.html Online Course System Backend This section provides detailed guidance on developing a foundational online course system, encompassing key entities: teacher , course , skill , and material . Database Schema 1. Teachers Table The Teachers table maintains information about instructors, including their personal and professional details. Field Header Data Type id ID Int firstname First Name String lastname Last Name String email Email String phone_number Phone Number String image Image String bio Bio Text 2. Courses Table The Courses table captures the details of educational offerings, including their scope, duration, and prerequisites. Field Header Data Type id ID Int name Course Name String status Status String level Level String summary Summary String image Image String desc Description Text duration Duration String start_date Start Date Datetime 3. Skills Table The Skills table records competencies attributed to teachers. Field Header Data Type id ID Int name Skill Name String years Years of Experience Int created_by Created By String created_at Created At Datetime updated_at Updated At Datetime 4. Materials Table The Materials table inventories resources linked to courses. Field Header Data Type id ID Int name Name String type Type String image Image String link Link String file File String Relationships Teachers to Courses : One-to-Many (Each teacher can teach multiple courses; each course is assigned to one teacher). Teachers to Skills : Many-to-Many (Multiple teachers can share skills, and one teacher may have multiple skills). Courses to Materials : Many-to-Many (A course may include multiple materials, and the same material can be used in different courses). Schema Creation via Fluent CMS Schema Builder Accessing Schema Builder After launching the web application, locate the Schema Builder menu on the homepage to start defining your schema. Adding Entities Example Configuration 1. Navigate to the Entities section of the Schema Builder. 2. Create entities such as \"Teacher\" and \"Course.\" 3. For the Course entity, add attributes such as name , status , level , and description . Defining Relationships Example Configuration 1. Course and Teacher (Many-to-One Relationship) To establish a many-to-one relationship between the Course and Teacher entities, you can include a Lookup attribute in the Course entity. This allows selecting a single Teacher record when adding or updating a Course . Attribute Value Field teacher Type Lookup Options Teacher Description: When a course is created or modified, a teacher record can be looked up and linked to the course. 2. Course and Materials (Many-to-Many Relationship) To establish a many-to-many relationship between the Course and Material entities, use a Crosstable attribute in the Course entity. This enables associating multiple materials with a single course. Attribute Value Field materials Type Crosstable Options Material Description: When managing a course, you can select multiple material records from the Material table to associate with the course. Admin Panel: Data Management Features 1. List Page Example Course List Page The List Page displays entities in a tabular format, enabling sorting, searching, and pagination. Users can efficiently browse or locate specific records. 2. Detail Page Example Course Detail Page The Detail Page provides an interface for viewing and managing detailed attributes. Related data such as teachers and materials can be selected or modified. GraphQL Query FluentCMS simplifies frontend development by offering robust GraphQL support. Getting Started Accessing the GraphQL IDE To get started, launch the web application and navigate to /graph . You can also try our online demo . Singular vs. List Response For each entity in FluentCMS, two GraphQL fields are automatically generated: - <entityName> : Returns a record. - <entityNameList> : Returns a list of records. **Single Course ** { course { id name } } Try it here **List of Courses ** { courseList { id name } } Try it here Field Selection You can query specific fields for both the current entity and its related entities. Example Query: { courseList{ id name teacher{ id firstname lastname skills{ id name } } materials{ id, name } } } Try it here Filtering with Value Match in FluentCMS FluentCMS provides flexible filtering capabilities using the idSet field (or any other field), enabling precise data queries by matching either a single value or a list of values. Filter by a Single Value Example: { courseList(idSet: 5) { id name } } Try it here Filter by Multiple Values Example: { courseList(idSet: [5, 7]) { id name } } Try it here Advanced Filtering with Operator Match in FluentCMS FluentCMS supports advanced filtering options with Operator Match , allowing users to combine various conditions for precise queries. matchAll Example: Filters where all specified conditions must be true. In this example: id > 5 and id < 15 . { courseList(id: {matchType: matchAll, gt: 5, lt: 15}) { id name } } Try it here matchAny Example: Filters where at least one of the conditions must be true. In this example: name starts with \"A\" or name starts with \"I\" . { courseList(name: [{matchType: matchAny}, {startsWith: \"A\"}, {startsWith: \"I\"}]) { id name } } Try it here Filter Expressions in FluentCMS Filter Expressions allow precise filtering by specifying a field, including nested fields using JSON path syntax. This enables filtering on subfields for complex data structures. Example: Filter by Teacher's Last Name This query returns courses taught by a teacher whose last name is \"Circuit.\" { courseList(filterExpr: {field: \"teacher.lastname\", clause: {equals: \"Circuit\"}}) { id name teacher { id lastname } } } Try it here Sorting Sorting by a single field { courseList(sort:nameDesc){ id, name } } Try it here Sorting by multiple fields { courseList(sort:[level,id]){ id, level name } } Try it here Sort Expressions in FluentCMS Sort Expressions allow sorting by nested fields using JSON path syntax. Example: Sort by Teacher's Last Name { courseList(sortExpr:{field:\"teacher.lastname\", order:Desc}) { id name teacher { id lastname } } } Try it here Pagination Pagination on root field { courseList(offset:2, limit:3){ id, name } } Try it here Pagination on sub field { courseList{ id, name materials(limit:2){ id, name } } } Try it here Variable Variables are used to make queries more dynamic, reusable, and secure. Variable in Value filter query ($id: Int!) { teacher(idSet: [$id]) { id firstname lastname } } Try it here Variable in Operator Match filter query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here Variable in Filter Expression query ($years: String) { teacherList(filterExpr:{field:\"skills.years\",clause:{gt:$years}}){ id firstname lastname skills{ id name years } } } Try it here Variable in Sort query ($sort_field:TeacherSortEnum) { teacherList(sort:[$sort_field]) { id firstname lastname } } Try it here Variable in Sort Expression query ($sort_order: SortOrderEnum) { courseList(sortExpr:{field:\"teacher.id\", order:$sort_order}){ id, name, teacher{ id, firstname } } } Try it here Variable in Pagination query ($offset:Int) { teacherList(limit:2, offset:$offset) { id firstname lastname } } Try it here Required vs Optional If you want a variable to be mandatory, you can add a ! to the end of the type query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here Explore the power of FluentCMS GraphQL and streamline your development workflow! Saved Query Realtime queries may expose excessive technical details, potentially leading to security vulnerabilities. Saved Queries address this issue by abstracting the GraphQL query details. They allow clients to provide only variables, enhancing security while retaining full functionality. Transitioning from Real-Time Queries to Saved Queries Using OperationName as the Saved Query Identifier In FluentCMS, the Operation Name in a GraphQL query serves as a unique identifier for saved queries. For instance, executing the following query automatically saves it as TeacherQuery : query TeacherQuery($id: Int) { teacherList(idSet: [$id]) { id firstname lastname skills { id name } } } Try it here Saved Query Endpoints FluentCMS generates two API endpoints for each saved query: List Records: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery Single Record: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/one/ Using REST API Query Strings as Variables The Saved Query API allows passing variables via query strings: Single Value: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/?id=3 Array of Values: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?id=3&id=4 This passes [3, 4] to the idSet argument. Additional Features of Saved Query Beyond performance and security improvements, Saved Query introduces enhanced functionalities to simplify development workflows. Pagination by offset Built-in variables offset and limit enable efficient pagination. For example: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=2&offset=2 offset Pagination for Subfields To display a limited number of subfield items (e.g., the first two skills of a teacher), use the JSON path variable, such as skills.limit : https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2 Pagination by cursor For large datasets, offset pagination can strain the database. For example, querying with offset=1000&limit=10 forces the database to retrieve 1010 records and discard the first 1000. To address this, Saved Query supports cursor-based pagination , which reduces database overhead. Example response for https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3 : [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6M30\" }, { }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6NX0\" } ] If hasNextPage of the last record is true , use the cursor to retrieve the next page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&last=eyJpZCI6NX0 Similarly, if hasPreviousPage of the first record is true , use the cursor to retrieve the previous page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&first=eyJpZCI6Nn0 Cursor-Based Pagination for Subfields Subfields also support cursor-based pagination. For instance, querying https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2 returns a response like this: [ { \"id\": 3, \"firstname\": \"Jane\", \"lastname\": \"Debuggins\", \"hasPreviousPage\": false, \"skills\": [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6MSwic291cmNlSWQiOjN9\" }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6Miwic291cmNlSWQiOjN9\" } ], \"cursor\": \"eyJpZCI6M30\" } ] To fetch the next two skills, use the cursor: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/part/skills?limit=2&last=eyJpZCI6Miwic291cmNlSWQiOjN9 Drag and Drop Page Designer The page designer utilizes the open-source GrapesJS and Handlebars, enabling seamless binding of GrapesJS Components with FluentCMS Queries for dynamic content rendering. Page Types: Landing Page, Detail Page, and Home Page Landing Page A landing page is typically the first page a visitor sees. - URL format : /page/<pagename> - Structure : Comprised of multiple sections, each section retrieves data via a query . Example : Landing Page This page fetches data from: - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?status=featured - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?level=Advanced Detail Page A detail page provides specific information about an item. - URL format : /page/<pagename>/<router parameter> - Data Retrieval : FluentCMS fetches data by passing the router parameter to a query . Example : Course Detail Page This page fetches data from: https://fluent-cms-admin.azurewebsites.net/api/queries/course/one?course_id=22 Home Page The homepage is a special type of landing page named home . - URL format : /pages/home - Special Behavior : If no other route matches the path / , FluentCMS renders /pages/home by default. Example : The URL / will be resolved to /pages/home unless explicitly overridden. Introduction to GrapesJS Panels Understanding the panels in GrapesJS is crucial for leveraging FluentCMS's customization capabilities in the Page Designer UI. This section explains the purpose of each panel and highlights how FluentCMS enhances specific areas to streamline content management and page design. Style Manager : Used to customize CSS properties of elements selected on the canvas. FluentCMS Integration : This panel is left unchanged by FluentCMS, as it already provides powerful styling options. Traits Panel : Allows modification of attributes for selected elements. FluentCMS Integration : Custom traits are added to this panel, enabling users to bind data to components dynamically. Layers Panel : Displays a hierarchical view of elements on the page, resembling a DOM tree. FluentCMS Integration : While FluentCMS does not alter this panel, it\u2019s helpful for locating and managing FluentCMS blocks within complex page designs. Blocks Panel : Contains pre-made components that can be dragged and dropped onto the page. FluentCMS Integration : FluentCMS enhances this panel by adding custom-designed blocks tailored for its CMS functionality. By familiarizing users with these panels and their integration points, this chapter ensures a smoother workflow and better utilization of FluentCMS's advanced page-building tools. Data Binding: Singleton or Multiple Records FluentCMS uses Handlebars expression for dynamic data binding. Singleton Singleton fields are enclosed within {{ }} . Multiple Records Handlebars loops over arrays using the each block. {{#each course}} <li>{{title}}</li> {{/each}} However, you won\u2019t see the {{#each}} statement in the GrapesJS Page Designer. FluentCMS adds it automatically for any block under the Multiple Records category. Steps to bind multiple records: 1. Drag a block from the Multiple Records category. 2. Hover over the GrapesJS components to find a block with the Multiple-records tag in the top-left corner, then click the Traits panel. You can also use the GrapesJS Layers Panel to locate the component. 3. In the Traits panel, you have the following options: - Field : Specify the field name for the Page-Level Query (e.g., for the FluentCMS Query below, you could set the field as teacher.skills ). json { \"teacher\": { \"firstname\": \"\", \"skills\": [ { \"name\": \"cooking fish\", \"years\": 3 } ] } } - Query : The query to retrieve data. - Qs : Query string parameters to pass (e.g., ?status=featured , ?level=Advanced ). - Offset : Number of records to skip. - Limit : Number of records to retrieve. - Pagination There are 3 Options: - Button , content is divided into multiple pages, and navigation buttons (e.g., \"Next,\" \"Previous,\" or numbered buttons) are provided to allow users to move between the pages. - Infinite Scroll , Content automatically loads as the user scrolls down the page, providing a seamless browsing experience without manual page transitions. It's better to set only one component to infinite scroll , and put it to the bottom of the pages. - None . Users see all the available content at once, without the need for additional actions. Linking and Images FluentCMS does not customize GrapesJS' Image and Link components, but locating where to input Query Field can be challenging. The steps below explain how to bind them. Link : Locate the link by hovering over the GrapesJS component or finding it in the GrapesJS Layers Panel . Then switch to the Traits Panel and input the detail page link, e.g., /pages/course/{{id}} . FluentCMS will render this as <a href=\"/pages/course/3\">...</a> . Image : Double-click on the image component, input the image path, and select the image. For example, if the image field is thumbnail_image_url , input /files/{{thumbnail_image_url}} . FluentCMS will replace {{thumbnail_image_url}} with the actual field value. Customized Blocks FluentCMS adds customized blocks to simplify web page design and data binding for FluentCMS Queries . These blocks use Tailwind CSS. Multiple Records : Components in this category contain subcomponents with a Multiple-Records trait. Card : Typically used in detail pages. Header : Represents a navigation bar or page header. Online Course System Frontend Having established our understanding of Fluent CMS essentials like Entity, Query, and Page, we're ready to build a frontend for an online course website. Introduction of online course website The online course website is designed to help users easily find courses tailored to their interests and goals. Home Page( home ) : This is the main entry point, providing Featured Course , Advanced Course , etc. Each course in these sections links to its Course Details page. Latest Courses( course ) : A curated list of the newest courses. Each course in this section links to its Course Details page. Course Details( course/{course_id} ) : This page provides a comprehensive view of a selected course. Users can navigate to the Teacher Details page to learn more about the instructor. Teacher Details( teacher/{teacher_id} ) : Here, users can explore the profile of the instructor, This page contains a teacher's latest course section , each course in the sections links back to Course Details Home Page | | +-------------------+ | | v v Latest Courses Course Details | | | | v v Course Details <-------> Teacher Details Designing the Home Page The home page's screenshot shows below. In the page designer, we drag a component Content-B , set it's multiple-records component's data source to Query course . The query might return data like [ { \"name\": \"Object-Oriented Programming(OOP)\", \"id\": 20, \"teacher\":{ \"id\": 3, \"firstname\": \"jane\" } } ] We set link href of each course item to /pages/course/{{id}} . HandleBar rendering engine renders the link as /pages/course/20 by replacing {{id}} to 20 . Creating Course Detail Page We name this page course/{course_id} to capture the path parameter course_id. For example, with the URL /pages/course/20 , we obtain {course_id: 20} . This parameter is passed to the Query Service, which then filters data to match: { \"fieldName\": \"id\", \"operator\": \"and\", \"omitFail\": true, \"constraints\": [ { \"match\": \"in\", \"value\": \"qs.course_id\" } ] } The query service produces a where clause as where id in (20) . Link to Teacher Detail Page We set the link of each teacher item as /pages/teacher/{{teacher.id}} , allowing navigation from Course Details to Teacher Details: For below example data, HandlerBar render the link as /pages/teacher/3 . [ { \"name\": \"Object-Oriented Programming(OOP)\", \"id\": 20, \"teacher\":{ \"id\": 3, \"firstname\": \"jane\" } } ] Creating Teacher's Detail Page Similarly, we name this page as teacher/{teacher_id} and set its data source Query to teacher . For the URL /pages/teacher/3, the query returns: { \"id\": 3, \"firstname\": \"Jane\", \"lastname\": \"Debuggins\", \"image\": \"/2024-10/b44dcb4c.jpg\", \"bio\": \"<p><strong>Ms. Debuggins</strong> is a seasoned software developer with over a decade of experience in full-stack development and system architecture. </p>\", \"skills\": [ { \"id\": 1, \"name\": \"C++\", \"years\": 3, \"teacher_id\": 3 } ] } To add a list of courses by the teacher, we set a multiple-records component with Query course . When rendering the Teacher Page, PageService sends {teacher_id: 3} to Query course . The QueryService Apply below filter, resulting in WHERE teacher in (3) . { \"fieldName\": \"teacher\", \"operator\": \"and\", \"omitFail\": true, \"constraints\": [ { \"match\": \"in\", \"value\": \"qs.teacher_id\" } ] } This design creates an interconnected online course site, ensuring users can explore course details, instructors. Permissions Control FluentCMS authorizes access to each entity by using role-based permissions and custom policies that control user actions like create, read, update, and delete. Fluent CMS' permission control module is decoupled from the Content Management module, allowing you to implement your own permission logic or forgo permission control entirely. The built-in permission control in Fluent CMS offers four privilege types for each entity: - ReadWrite : Full access to read and write. - RestrictedReadWrite : Users can only modify records they have created. - Readonly : View-only access. - RestrictedReadonly : Users can only view records they have created. Additionally, Fluent CMS supports custom roles, where a user's privileges are a combination of their individual entity privileges and the privileges assigned to their role. To enable fluentCMS' build-in permission control feature, add the following line . //add fluent cms' permission control service builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlite(connectionString)); builder.AddCmsAuth<IdentityUser, IdentityRole, AppDbContext>(); And add the follow line after app was built if you want to add a default user. InvalidParamExceptionFactory.CheckResult(await app.EnsureCmsUser(\"sadmin@cms.com\", \"Admin1!\", [Roles.Sa])); Behind the scene, fluentCMS leverage the hook mechanism. Add it to your own project The following chapter will guid you through add Fluent CMS to your own project by adding a nuget package. Create your own Asp.net Core WebApplication. Add FluentCMS package shell dotnet add package FluentCMS Modify Program.cs, add the following line before builder.Build(), the input parameter is the connection string of database. builder.AddSqliteCms(\"Data Source=cms.db\"); var app = builder.Build(); Currently FluentCMS support AddSqliteCms , AddSqlServerCms , AddPostgresCMS . Add the following line After builder.Build() await app.UseCmsAsync(); this function bootstrap router, initialize Fluent CMS schema table When the web server is up and running, you can access Admin Panel by url /admin , you can access Schema builder by url /schema . The example project can be found at Example Project . Add business logics The following chapter will guide you through add your own business logic by add validation logic, hook functions, and produce events to Kafka. Add validation logic using simple c# express Simple C# logic You can add simple c# expression to Validation Rule of attributes, the expression is supported by Dynamic Expresso . For example, you can add simple expression like name != null . You can also add Validation Error Message , the end user can see this message if validate fail. Regular Expression Support Dynamic Expresso supports regex, for example you can write Validation Rule Regex.IsMatch(email, \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\") . Because Dyamic Expresso doesn't support Verbatim String , you have to escape \\ . Extent functionality by add Hook functions You need to add your own Business logic, for examples, you want to verify if the email and phone number of entity teacher is valid. you can register a cook function before insert or update teacher var registry = app.GetHookRegistry(); registry.EntityPreAdd.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; }); registry.EntityPreUpdate.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; }); Produce Events to Event Broker(e.g.Kafka) You can also choose produce events to Event Broker(e.g.Kafka), so Consumer Application function can implement business logic in a async manner. The producing event functionality is implemented by adding hook functions behind the scene, to enable this functionality, you need add two line of code, builder.AddKafkaMessageProducer(\"localhost:9092\"); and app.RegisterMessageProducerHook() . builder.AddSqliteCms(\"Data Source=cmsapp.db\").PrintVersion(); builder.AddKafkaMessageProducer(\"localhost:9092\"); var app = builder.Build(); await app.UseCmsAsync(false); app.RegisterMessageProducerHook(); Development Guide The backend is written in ASP.NET Core, the Admin Panel uses React, and the Schema Builder is developed with jQuery. System Overviews - Backend Server - Admin Panel UI - Schema Builder Backend Server Tools : ASP.NET Core SqlKata : SqlKata Admin Panel UI Tools : React PrimeReact : PrimeReact UI Library SWR : Data Fetching/State Management Schema Builder UI Tools : jsoneditor : JSON Editor Testing Strategy This chapter describes Fluent CMS's automated testing strategy Fluent CMS favors integration testing over unit testing because integration tests can catch more real-world issues. For example, when inserting a record into the database, multiple modules are involved: - EntitiesController - EntitiesService - Entity (in the query builder) - Query executors (e.g., SqlLite , Postgres , SqlServer ) Writing unit tests for each individual function and mocking its upstream and downstream services can be tedious. Instead, Fluent CMS focuses on checking the input and output of RESTful API endpoints in its integration tests. However, certain cases, such as the Hook Registry or application bootstrap, are simpler to cover with unit tests. Unit Testing /fluent-cms/server/FluentCMS.Test This project focuses on testing specific modules, such as: - Hook Registry - Application Bootstrap Integration Testing for FluentCMS.Blog /fluent-cms/server/FluentCMS.Blog.Tests This project focuses on verifying the functionalities of the FluentCMS.Blog example project. New Feature Testing /fluent-cms/server/FluentCMS.App.Tests This project is dedicated to testing experimental functionalities, like MongoDB and Kafka plugins.","title":"Home"},{"location":"#what-is-fluent-cms","text":"Fluent CMS is an open-source Content Management System designed to simplify and accelerate web development workflows. While it's particularly suited for CMS projects, it is also highly beneficial for general web applications, reducing the need for repetitive REST/GraphQL API development. Effortless CRUD Operations: Fluent CMS includes built-in RESTful APIs for Create, Read, Update, and Delete (CRUD) operations, complemented by a React-based admin panel for efficient data management. Powerful GraphQL Queries: Access multiple related entities in a single query, enhancing client-side performance, security, and flexibility. Drag-and-Drop Page Designer: Build dynamic pages effortlessly using the integrated page designer powered by Grapes.js and Handlebars . Easily bind data sources for an interactive and streamlined design experience.","title":"What is Fluent CMS?"},{"location":"#online-course-system-demo","text":"","title":"Online Course System Demo"},{"location":"#source-code","text":"Example Blog Project on GitHub","title":"Source Code"},{"location":"#live-demo","text":"Public Site: fluent-cms-admin.azurewebsites.net Admin Panel: fluent-cms-admin.azurewebsites.net/admin Email: admin@cms.com Password: Admin1!","title":"Live Demo"},{"location":"#additional-resources","text":"GraphQL Playground: fluent-cms-admin.azurewebsites.net/graph Documentation: fluent-cms-admin.azurewebsites.net/doc/index.html","title":"Additional Resources"},{"location":"#online-course-system-backend","text":"This section provides detailed guidance on developing a foundational online course system, encompassing key entities: teacher , course , skill , and material .","title":"Online Course System Backend"},{"location":"#database-schema","text":"","title":"Database Schema"},{"location":"#1-teachers-table","text":"The Teachers table maintains information about instructors, including their personal and professional details. Field Header Data Type id ID Int firstname First Name String lastname Last Name String email Email String phone_number Phone Number String image Image String bio Bio Text","title":"1. Teachers Table"},{"location":"#2-courses-table","text":"The Courses table captures the details of educational offerings, including their scope, duration, and prerequisites. Field Header Data Type id ID Int name Course Name String status Status String level Level String summary Summary String image Image String desc Description Text duration Duration String start_date Start Date Datetime","title":"2. Courses Table"},{"location":"#3-skills-table","text":"The Skills table records competencies attributed to teachers. Field Header Data Type id ID Int name Skill Name String years Years of Experience Int created_by Created By String created_at Created At Datetime updated_at Updated At Datetime","title":"3. Skills Table"},{"location":"#4-materials-table","text":"The Materials table inventories resources linked to courses. Field Header Data Type id ID Int name Name String type Type String image Image String link Link String file File String","title":"4. Materials Table"},{"location":"#relationships","text":"Teachers to Courses : One-to-Many (Each teacher can teach multiple courses; each course is assigned to one teacher). Teachers to Skills : Many-to-Many (Multiple teachers can share skills, and one teacher may have multiple skills). Courses to Materials : Many-to-Many (A course may include multiple materials, and the same material can be used in different courses).","title":"Relationships"},{"location":"#schema-creation-via-fluent-cms-schema-builder","text":"","title":"Schema Creation via Fluent CMS Schema Builder"},{"location":"#accessing-schema-builder","text":"After launching the web application, locate the Schema Builder menu on the homepage to start defining your schema.","title":"Accessing Schema Builder"},{"location":"#adding-entities","text":"Example Configuration 1. Navigate to the Entities section of the Schema Builder. 2. Create entities such as \"Teacher\" and \"Course.\" 3. For the Course entity, add attributes such as name , status , level , and description .","title":"Adding Entities"},{"location":"#defining-relationships","text":"Example Configuration","title":"Defining Relationships"},{"location":"#1-course-and-teacher-many-to-one-relationship","text":"To establish a many-to-one relationship between the Course and Teacher entities, you can include a Lookup attribute in the Course entity. This allows selecting a single Teacher record when adding or updating a Course . Attribute Value Field teacher Type Lookup Options Teacher Description: When a course is created or modified, a teacher record can be looked up and linked to the course.","title":"1. Course and Teacher (Many-to-One Relationship)"},{"location":"#2-course-and-materials-many-to-many-relationship","text":"To establish a many-to-many relationship between the Course and Material entities, use a Crosstable attribute in the Course entity. This enables associating multiple materials with a single course. Attribute Value Field materials Type Crosstable Options Material Description: When managing a course, you can select multiple material records from the Material table to associate with the course.","title":"2. Course and Materials (Many-to-Many Relationship)"},{"location":"#admin-panel-data-management-features","text":"","title":"Admin Panel: Data Management Features"},{"location":"#1-list-page","text":"Example Course List Page The List Page displays entities in a tabular format, enabling sorting, searching, and pagination. Users can efficiently browse or locate specific records.","title":"1. List Page"},{"location":"#2-detail-page","text":"Example Course Detail Page The Detail Page provides an interface for viewing and managing detailed attributes. Related data such as teachers and materials can be selected or modified.","title":"2. Detail Page"},{"location":"#graphql-query","text":"FluentCMS simplifies frontend development by offering robust GraphQL support.","title":"GraphQL Query"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#accessing-the-graphql-ide","text":"To get started, launch the web application and navigate to /graph . You can also try our online demo .","title":"Accessing the GraphQL IDE"},{"location":"#singular-vs-list-response","text":"For each entity in FluentCMS, two GraphQL fields are automatically generated: - <entityName> : Returns a record. - <entityNameList> : Returns a list of records. **Single Course ** { course { id name } } Try it here **List of Courses ** { courseList { id name } } Try it here","title":"Singular vs. List Response"},{"location":"#field-selection","text":"You can query specific fields for both the current entity and its related entities. Example Query: { courseList{ id name teacher{ id firstname lastname skills{ id name } } materials{ id, name } } } Try it here","title":"Field Selection"},{"location":"#filtering-with-value-match-in-fluentcms","text":"FluentCMS provides flexible filtering capabilities using the idSet field (or any other field), enabling precise data queries by matching either a single value or a list of values. Filter by a Single Value Example: { courseList(idSet: 5) { id name } } Try it here Filter by Multiple Values Example: { courseList(idSet: [5, 7]) { id name } } Try it here","title":"Filtering with Value Match in FluentCMS"},{"location":"#advanced-filtering-with-operator-match-in-fluentcms","text":"FluentCMS supports advanced filtering options with Operator Match , allowing users to combine various conditions for precise queries.","title":"Advanced Filtering with Operator Match in FluentCMS"},{"location":"#matchall-example","text":"Filters where all specified conditions must be true. In this example: id > 5 and id < 15 . { courseList(id: {matchType: matchAll, gt: 5, lt: 15}) { id name } } Try it here","title":"matchAll Example:"},{"location":"#matchany-example","text":"Filters where at least one of the conditions must be true. In this example: name starts with \"A\" or name starts with \"I\" . { courseList(name: [{matchType: matchAny}, {startsWith: \"A\"}, {startsWith: \"I\"}]) { id name } } Try it here","title":"matchAny Example:"},{"location":"#filter-expressions-in-fluentcms","text":"Filter Expressions allow precise filtering by specifying a field, including nested fields using JSON path syntax. This enables filtering on subfields for complex data structures. Example: Filter by Teacher's Last Name This query returns courses taught by a teacher whose last name is \"Circuit.\" { courseList(filterExpr: {field: \"teacher.lastname\", clause: {equals: \"Circuit\"}}) { id name teacher { id lastname } } } Try it here","title":"Filter Expressions in FluentCMS"},{"location":"#sorting","text":"Sorting by a single field { courseList(sort:nameDesc){ id, name } } Try it here Sorting by multiple fields { courseList(sort:[level,id]){ id, level name } } Try it here","title":"Sorting"},{"location":"#sort-expressions-in-fluentcms","text":"Sort Expressions allow sorting by nested fields using JSON path syntax. Example: Sort by Teacher's Last Name { courseList(sortExpr:{field:\"teacher.lastname\", order:Desc}) { id name teacher { id lastname } } } Try it here","title":"Sort Expressions in FluentCMS"},{"location":"#pagination","text":"Pagination on root field { courseList(offset:2, limit:3){ id, name } } Try it here Pagination on sub field { courseList{ id, name materials(limit:2){ id, name } } } Try it here","title":"Pagination"},{"location":"#variable","text":"Variables are used to make queries more dynamic, reusable, and secure.","title":"Variable"},{"location":"#variable-in-value-filter","text":"query ($id: Int!) { teacher(idSet: [$id]) { id firstname lastname } } Try it here","title":"Variable in Value filter"},{"location":"#variable-in-operator-match-filter","text":"query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here","title":"Variable in Operator Match filter"},{"location":"#variable-in-filter-expression","text":"query ($years: String) { teacherList(filterExpr:{field:\"skills.years\",clause:{gt:$years}}){ id firstname lastname skills{ id name years } } } Try it here","title":"Variable in Filter Expression"},{"location":"#variable-in-sort","text":"query ($sort_field:TeacherSortEnum) { teacherList(sort:[$sort_field]) { id firstname lastname } } Try it here","title":"Variable in Sort"},{"location":"#variable-in-sort-expression","text":"query ($sort_order: SortOrderEnum) { courseList(sortExpr:{field:\"teacher.id\", order:$sort_order}){ id, name, teacher{ id, firstname } } } Try it here","title":"Variable in Sort Expression"},{"location":"#variable-in-pagination","text":"query ($offset:Int) { teacherList(limit:2, offset:$offset) { id firstname lastname } } Try it here","title":"Variable in Pagination"},{"location":"#required-vs-optional","text":"If you want a variable to be mandatory, you can add a ! to the end of the type query ($id: Int!) { teacherList(id:{equals:$id}){ id firstname lastname } } Try it here Explore the power of FluentCMS GraphQL and streamline your development workflow!","title":"Required vs Optional"},{"location":"#saved-query","text":"Realtime queries may expose excessive technical details, potentially leading to security vulnerabilities. Saved Queries address this issue by abstracting the GraphQL query details. They allow clients to provide only variables, enhancing security while retaining full functionality.","title":"Saved Query"},{"location":"#transitioning-from-real-time-queries-to-saved-queries","text":"","title":"Transitioning from Real-Time Queries to Saved Queries"},{"location":"#using-operationname-as-the-saved-query-identifier","text":"In FluentCMS, the Operation Name in a GraphQL query serves as a unique identifier for saved queries. For instance, executing the following query automatically saves it as TeacherQuery : query TeacherQuery($id: Int) { teacherList(idSet: [$id]) { id firstname lastname skills { id name } } } Try it here","title":"Using OperationName as the Saved Query Identifier"},{"location":"#saved-query-endpoints","text":"FluentCMS generates two API endpoints for each saved query: List Records: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery Single Record: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/one/","title":"Saved Query Endpoints"},{"location":"#using-rest-api-query-strings-as-variables","text":"The Saved Query API allows passing variables via query strings: Single Value: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/?id=3 Array of Values: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?id=3&id=4 This passes [3, 4] to the idSet argument.","title":"Using REST API Query Strings as Variables"},{"location":"#additional-features-of-saved-query","text":"Beyond performance and security improvements, Saved Query introduces enhanced functionalities to simplify development workflows.","title":"Additional Features of Saved Query"},{"location":"#pagination-by-offset","text":"Built-in variables offset and limit enable efficient pagination. For example: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=2&offset=2","title":"Pagination by offset"},{"location":"#offset-pagination-for-subfields","text":"To display a limited number of subfield items (e.g., the first two skills of a teacher), use the JSON path variable, such as skills.limit : https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2","title":"offset Pagination for Subfields"},{"location":"#pagination-by-cursor","text":"For large datasets, offset pagination can strain the database. For example, querying with offset=1000&limit=10 forces the database to retrieve 1010 records and discard the first 1000. To address this, Saved Query supports cursor-based pagination , which reduces database overhead. Example response for https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3 : [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6M30\" }, { }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6NX0\" } ] If hasNextPage of the last record is true , use the cursor to retrieve the next page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&last=eyJpZCI6NX0 Similarly, if hasPreviousPage of the first record is true , use the cursor to retrieve the previous page: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?limit=3&first=eyJpZCI6Nn0","title":"Pagination by cursor"},{"location":"#cursor-based-pagination-for-subfields","text":"Subfields also support cursor-based pagination. For instance, querying https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery?skills.limit=2 returns a response like this: [ { \"id\": 3, \"firstname\": \"Jane\", \"lastname\": \"Debuggins\", \"hasPreviousPage\": false, \"skills\": [ { \"hasPreviousPage\": false, \"cursor\": \"eyJpZCI6MSwic291cmNlSWQiOjN9\" }, { \"hasNextPage\": true, \"cursor\": \"eyJpZCI6Miwic291cmNlSWQiOjN9\" } ], \"cursor\": \"eyJpZCI6M30\" } ] To fetch the next two skills, use the cursor: https://fluent-cms-admin.azurewebsites.net/api/queries/TeacherQuery/part/skills?limit=2&last=eyJpZCI6Miwic291cmNlSWQiOjN9","title":"Cursor-Based Pagination for Subfields"},{"location":"#drag-and-drop-page-designer","text":"The page designer utilizes the open-source GrapesJS and Handlebars, enabling seamless binding of GrapesJS Components with FluentCMS Queries for dynamic content rendering.","title":"Drag and Drop Page Designer"},{"location":"#page-types-landing-page-detail-page-and-home-page","text":"","title":"Page Types: Landing Page, Detail Page, and Home Page"},{"location":"#landing-page","text":"A landing page is typically the first page a visitor sees. - URL format : /page/<pagename> - Structure : Comprised of multiple sections, each section retrieves data via a query . Example : Landing Page This page fetches data from: - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?status=featured - https://fluent-cms-admin.azurewebsites.net/api/queries/course/?level=Advanced","title":"Landing Page"},{"location":"#detail-page","text":"A detail page provides specific information about an item. - URL format : /page/<pagename>/<router parameter> - Data Retrieval : FluentCMS fetches data by passing the router parameter to a query . Example : Course Detail Page This page fetches data from: https://fluent-cms-admin.azurewebsites.net/api/queries/course/one?course_id=22","title":"Detail Page"},{"location":"#home-page","text":"The homepage is a special type of landing page named home . - URL format : /pages/home - Special Behavior : If no other route matches the path / , FluentCMS renders /pages/home by default. Example : The URL / will be resolved to /pages/home unless explicitly overridden.","title":"Home Page"},{"location":"#introduction-to-grapesjs-panels","text":"Understanding the panels in GrapesJS is crucial for leveraging FluentCMS's customization capabilities in the Page Designer UI. This section explains the purpose of each panel and highlights how FluentCMS enhances specific areas to streamline content management and page design. Style Manager : Used to customize CSS properties of elements selected on the canvas. FluentCMS Integration : This panel is left unchanged by FluentCMS, as it already provides powerful styling options. Traits Panel : Allows modification of attributes for selected elements. FluentCMS Integration : Custom traits are added to this panel, enabling users to bind data to components dynamically. Layers Panel : Displays a hierarchical view of elements on the page, resembling a DOM tree. FluentCMS Integration : While FluentCMS does not alter this panel, it\u2019s helpful for locating and managing FluentCMS blocks within complex page designs. Blocks Panel : Contains pre-made components that can be dragged and dropped onto the page. FluentCMS Integration : FluentCMS enhances this panel by adding custom-designed blocks tailored for its CMS functionality. By familiarizing users with these panels and their integration points, this chapter ensures a smoother workflow and better utilization of FluentCMS's advanced page-building tools.","title":"Introduction to GrapesJS Panels"},{"location":"#data-binding-singleton-or-multiple-records","text":"FluentCMS uses Handlebars expression for dynamic data binding.","title":"Data Binding: Singleton or Multiple Records"},{"location":"#singleton","text":"Singleton fields are enclosed within {{ }} .","title":"Singleton"},{"location":"#multiple-records","text":"Handlebars loops over arrays using the each block. {{#each course}} <li>{{title}}</li> {{/each}} However, you won\u2019t see the {{#each}} statement in the GrapesJS Page Designer. FluentCMS adds it automatically for any block under the Multiple Records category. Steps to bind multiple records: 1. Drag a block from the Multiple Records category. 2. Hover over the GrapesJS components to find a block with the Multiple-records tag in the top-left corner, then click the Traits panel. You can also use the GrapesJS Layers Panel to locate the component. 3. In the Traits panel, you have the following options: - Field : Specify the field name for the Page-Level Query (e.g., for the FluentCMS Query below, you could set the field as teacher.skills ). json { \"teacher\": { \"firstname\": \"\", \"skills\": [ { \"name\": \"cooking fish\", \"years\": 3 } ] } } - Query : The query to retrieve data. - Qs : Query string parameters to pass (e.g., ?status=featured , ?level=Advanced ). - Offset : Number of records to skip. - Limit : Number of records to retrieve. - Pagination There are 3 Options: - Button , content is divided into multiple pages, and navigation buttons (e.g., \"Next,\" \"Previous,\" or numbered buttons) are provided to allow users to move between the pages. - Infinite Scroll , Content automatically loads as the user scrolls down the page, providing a seamless browsing experience without manual page transitions. It's better to set only one component to infinite scroll , and put it to the bottom of the pages. - None . Users see all the available content at once, without the need for additional actions.","title":"Multiple Records"},{"location":"#linking-and-images","text":"FluentCMS does not customize GrapesJS' Image and Link components, but locating where to input Query Field can be challenging. The steps below explain how to bind them. Link : Locate the link by hovering over the GrapesJS component or finding it in the GrapesJS Layers Panel . Then switch to the Traits Panel and input the detail page link, e.g., /pages/course/{{id}} . FluentCMS will render this as <a href=\"/pages/course/3\">...</a> . Image : Double-click on the image component, input the image path, and select the image. For example, if the image field is thumbnail_image_url , input /files/{{thumbnail_image_url}} . FluentCMS will replace {{thumbnail_image_url}} with the actual field value.","title":"Linking and Images"},{"location":"#customized-blocks","text":"FluentCMS adds customized blocks to simplify web page design and data binding for FluentCMS Queries . These blocks use Tailwind CSS. Multiple Records : Components in this category contain subcomponents with a Multiple-Records trait. Card : Typically used in detail pages. Header : Represents a navigation bar or page header.","title":"Customized Blocks"},{"location":"#online-course-system-frontend","text":"Having established our understanding of Fluent CMS essentials like Entity, Query, and Page, we're ready to build a frontend for an online course website.","title":"Online Course System Frontend"},{"location":"#introduction-of-online-course-website","text":"The online course website is designed to help users easily find courses tailored to their interests and goals. Home Page( home ) : This is the main entry point, providing Featured Course , Advanced Course , etc. Each course in these sections links to its Course Details page. Latest Courses( course ) : A curated list of the newest courses. Each course in this section links to its Course Details page. Course Details( course/{course_id} ) : This page provides a comprehensive view of a selected course. Users can navigate to the Teacher Details page to learn more about the instructor. Teacher Details( teacher/{teacher_id} ) : Here, users can explore the profile of the instructor, This page contains a teacher's latest course section , each course in the sections links back to Course Details Home Page | | +-------------------+ | | v v Latest Courses Course Details | | | | v v Course Details <-------> Teacher Details","title":"Introduction of online course website"},{"location":"#designing-the-home-page","text":"The home page's screenshot shows below. In the page designer, we drag a component Content-B , set it's multiple-records component's data source to Query course . The query might return data like [ { \"name\": \"Object-Oriented Programming(OOP)\", \"id\": 20, \"teacher\":{ \"id\": 3, \"firstname\": \"jane\" } } ] We set link href of each course item to /pages/course/{{id}} . HandleBar rendering engine renders the link as /pages/course/20 by replacing {{id}} to 20 .","title":"Designing the Home Page"},{"location":"#creating-course-detail-page","text":"We name this page course/{course_id} to capture the path parameter course_id. For example, with the URL /pages/course/20 , we obtain {course_id: 20} . This parameter is passed to the Query Service, which then filters data to match: { \"fieldName\": \"id\", \"operator\": \"and\", \"omitFail\": true, \"constraints\": [ { \"match\": \"in\", \"value\": \"qs.course_id\" } ] } The query service produces a where clause as where id in (20) .","title":"Creating Course Detail Page"},{"location":"#link-to-teacher-detail-page","text":"We set the link of each teacher item as /pages/teacher/{{teacher.id}} , allowing navigation from Course Details to Teacher Details: For below example data, HandlerBar render the link as /pages/teacher/3 . [ { \"name\": \"Object-Oriented Programming(OOP)\", \"id\": 20, \"teacher\":{ \"id\": 3, \"firstname\": \"jane\" } } ]","title":"Link to Teacher Detail Page"},{"location":"#creating-teachers-detail-page","text":"Similarly, we name this page as teacher/{teacher_id} and set its data source Query to teacher . For the URL /pages/teacher/3, the query returns: { \"id\": 3, \"firstname\": \"Jane\", \"lastname\": \"Debuggins\", \"image\": \"/2024-10/b44dcb4c.jpg\", \"bio\": \"<p><strong>Ms. Debuggins</strong> is a seasoned software developer with over a decade of experience in full-stack development and system architecture. </p>\", \"skills\": [ { \"id\": 1, \"name\": \"C++\", \"years\": 3, \"teacher_id\": 3 } ] } To add a list of courses by the teacher, we set a multiple-records component with Query course . When rendering the Teacher Page, PageService sends {teacher_id: 3} to Query course . The QueryService Apply below filter, resulting in WHERE teacher in (3) . { \"fieldName\": \"teacher\", \"operator\": \"and\", \"omitFail\": true, \"constraints\": [ { \"match\": \"in\", \"value\": \"qs.teacher_id\" } ] } This design creates an interconnected online course site, ensuring users can explore course details, instructors.","title":"Creating Teacher's Detail Page"},{"location":"#permissions-control","text":"FluentCMS authorizes access to each entity by using role-based permissions and custom policies that control user actions like create, read, update, and delete. Fluent CMS' permission control module is decoupled from the Content Management module, allowing you to implement your own permission logic or forgo permission control entirely. The built-in permission control in Fluent CMS offers four privilege types for each entity: - ReadWrite : Full access to read and write. - RestrictedReadWrite : Users can only modify records they have created. - Readonly : View-only access. - RestrictedReadonly : Users can only view records they have created. Additionally, Fluent CMS supports custom roles, where a user's privileges are a combination of their individual entity privileges and the privileges assigned to their role. To enable fluentCMS' build-in permission control feature, add the following line . //add fluent cms' permission control service builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlite(connectionString)); builder.AddCmsAuth<IdentityUser, IdentityRole, AppDbContext>(); And add the follow line after app was built if you want to add a default user. InvalidParamExceptionFactory.CheckResult(await app.EnsureCmsUser(\"sadmin@cms.com\", \"Admin1!\", [Roles.Sa])); Behind the scene, fluentCMS leverage the hook mechanism.","title":"Permissions Control"},{"location":"#add-it-to-your-own-project","text":"The following chapter will guid you through add Fluent CMS to your own project by adding a nuget package. Create your own Asp.net Core WebApplication. Add FluentCMS package shell dotnet add package FluentCMS Modify Program.cs, add the following line before builder.Build(), the input parameter is the connection string of database. builder.AddSqliteCms(\"Data Source=cms.db\"); var app = builder.Build(); Currently FluentCMS support AddSqliteCms , AddSqlServerCms , AddPostgresCMS . Add the following line After builder.Build() await app.UseCmsAsync(); this function bootstrap router, initialize Fluent CMS schema table When the web server is up and running, you can access Admin Panel by url /admin , you can access Schema builder by url /schema . The example project can be found at Example Project .","title":"Add it to your own project"},{"location":"#add-business-logics","text":"The following chapter will guide you through add your own business logic by add validation logic, hook functions, and produce events to Kafka.","title":"Add business logics"},{"location":"#add-validation-logic-using-simple-c-express","text":"","title":"Add validation logic using simple c# express"},{"location":"#simple-c-logic","text":"You can add simple c# expression to Validation Rule of attributes, the expression is supported by Dynamic Expresso . For example, you can add simple expression like name != null . You can also add Validation Error Message , the end user can see this message if validate fail.","title":"Simple C# logic"},{"location":"#regular-expression-support","text":"Dynamic Expresso supports regex, for example you can write Validation Rule Regex.IsMatch(email, \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\") . Because Dyamic Expresso doesn't support Verbatim String , you have to escape \\ .","title":"Regular Expression Support"},{"location":"#extent-functionality-by-add-hook-functions","text":"You need to add your own Business logic, for examples, you want to verify if the email and phone number of entity teacher is valid. you can register a cook function before insert or update teacher var registry = app.GetHookRegistry(); registry.EntityPreAdd.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; }); registry.EntityPreUpdate.Register(\"teacher\", args => { VerifyTeacher(args.RefRecord); return args; });","title":"Extent functionality by add Hook functions"},{"location":"#produce-events-to-event-brokeregkafka","text":"You can also choose produce events to Event Broker(e.g.Kafka), so Consumer Application function can implement business logic in a async manner. The producing event functionality is implemented by adding hook functions behind the scene, to enable this functionality, you need add two line of code, builder.AddKafkaMessageProducer(\"localhost:9092\"); and app.RegisterMessageProducerHook() . builder.AddSqliteCms(\"Data Source=cmsapp.db\").PrintVersion(); builder.AddKafkaMessageProducer(\"localhost:9092\"); var app = builder.Build(); await app.UseCmsAsync(false); app.RegisterMessageProducerHook();","title":"Produce Events to Event Broker(e.g.Kafka)"},{"location":"#development-guide","text":"The backend is written in ASP.NET Core, the Admin Panel uses React, and the Schema Builder is developed with jQuery.","title":"Development Guide"},{"location":"#system-overviews","text":"- Backend Server - Admin Panel UI - Schema Builder","title":"System Overviews"},{"location":"#backend-server","text":"Tools : ASP.NET Core SqlKata : SqlKata","title":"Backend Server"},{"location":"#admin-panel-ui","text":"Tools : React PrimeReact : PrimeReact UI Library SWR : Data Fetching/State Management","title":"Admin Panel UI"},{"location":"#schema-builder-ui","text":"Tools : jsoneditor : JSON Editor","title":"Schema Builder UI"},{"location":"#testing-strategy","text":"This chapter describes Fluent CMS's automated testing strategy Fluent CMS favors integration testing over unit testing because integration tests can catch more real-world issues. For example, when inserting a record into the database, multiple modules are involved: - EntitiesController - EntitiesService - Entity (in the query builder) - Query executors (e.g., SqlLite , Postgres , SqlServer ) Writing unit tests for each individual function and mocking its upstream and downstream services can be tedious. Instead, Fluent CMS focuses on checking the input and output of RESTful API endpoints in its integration tests. However, certain cases, such as the Hook Registry or application bootstrap, are simpler to cover with unit tests.","title":"Testing Strategy"},{"location":"#unit-testing-fluent-cmsserverfluentcmstest","text":"This project focuses on testing specific modules, such as: - Hook Registry - Application Bootstrap","title":"Unit Testing /fluent-cms/server/FluentCMS.Test"},{"location":"#integration-testing-for-fluentcmsblog-fluent-cmsserverfluentcmsblogtests","text":"This project focuses on verifying the functionalities of the FluentCMS.Blog example project.","title":"Integration Testing for FluentCMS.Blog /fluent-cms/server/FluentCMS.Blog.Tests"},{"location":"#new-feature-testing-fluent-cmsserverfluentcmsapptests","text":"This project is dedicated to testing experimental functionalities, like MongoDB and Kafka plugins.","title":"New Feature Testing /fluent-cms/server/FluentCMS.App.Tests"}]}